
0_led_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000458  08000460  00010460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000458  08000458  00010460  2**0
                  CONTENTS
  4 .ARM          00000000  08000458  08000458  00010460  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000458  08000460  00010460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800045c  0800045c  0001045c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000460  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000460  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010490  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006ed  00000000  00000000  000104d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000201  00000000  00000000  00010bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00010dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005f  00000000  00000000  00010e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c0e  00000000  00000000  00010ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f76  00000000  00000000  00029acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b0d2  00000000  00000000  0002aa43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000fc  00000000  00000000  000b5b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b5c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000440 	.word	0x08000440

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000440 	.word	0x08000440

08000204 <clock_config>:
#define PLL_N 	180
#define PLL_P 	0  // PLLP = 2


void clock_config(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/*1) Defining HSE using RCC_CR register    RM_127*/
	RCC -> CR |= RCC_CR_HSEON;
 8000208:	4b31      	ldr	r3, [pc, #196]	; (80002d0 <clock_config+0xcc>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a30      	ldr	r2, [pc, #192]	; (80002d0 <clock_config+0xcc>)
 800020e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000212:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000214:	bf00      	nop
 8000216:	4b2e      	ldr	r3, [pc, #184]	; (80002d0 <clock_config+0xcc>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800021e:	2b00      	cmp	r3, #0
 8000220:	d0f9      	beq.n	8000216 <clock_config+0x12>

	/*2) Enabling the power using RCC_APB1ENR register 		RM_147*/
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN  ;
 8000222:	4b2b      	ldr	r3, [pc, #172]	; (80002d0 <clock_config+0xcc>)
 8000224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000226:	4a2a      	ldr	r2, [pc, #168]	; (80002d0 <clock_config+0xcc>)
 8000228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800022c:	6413      	str	r3, [r2, #64]	; 0x40
	PWR -> CR |= PWR_CR_VOS;								/*RM_111*/
 800022e:	4b29      	ldr	r3, [pc, #164]	; (80002d4 <clock_config+0xd0>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a28      	ldr	r2, [pc, #160]	; (80002d4 <clock_config+0xd0>)
 8000234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000238:	6013      	str	r3, [r2, #0]

	/*3) Flash Prefatch and Latency settings*/
	FLASH->ACR |= 1<<8;
 800023a:	4b27      	ldr	r3, [pc, #156]	; (80002d8 <clock_config+0xd4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a26      	ldr	r2, [pc, #152]	; (80002d8 <clock_config+0xd4>)
 8000240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000244:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<9;
 8000246:	4b24      	ldr	r3, [pc, #144]	; (80002d8 <clock_config+0xd4>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a23      	ldr	r2, [pc, #140]	; (80002d8 <clock_config+0xd4>)
 800024c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000250:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<10;
 8000252:	4b21      	ldr	r3, [pc, #132]	; (80002d8 <clock_config+0xd4>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a20      	ldr	r2, [pc, #128]	; (80002d8 <clock_config+0xd4>)
 8000258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025c:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 5<<0;
 800025e:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <clock_config+0xd4>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a1d      	ldr	r2, [pc, #116]	; (80002d8 <clock_config+0xd4>)
 8000264:	f043 0305 	orr.w	r3, r3, #5
 8000268:	6013      	str	r3, [r2, #0]

	/*4) Configure Prescalers HCLK, PCLK1, PCLK2*/

	//AHB PR
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800026a:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <clock_config+0xcc>)
 800026c:	4a18      	ldr	r2, [pc, #96]	; (80002d0 <clock_config+0xcc>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	6093      	str	r3, [r2, #8]

	//APB1 PR
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <clock_config+0xcc>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	4a16      	ldr	r2, [pc, #88]	; (80002d0 <clock_config+0xcc>)
 8000278:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800027c:	6093      	str	r3, [r2, #8]

	//APB2 PR
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <clock_config+0xcc>)
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <clock_config+0xcc>)
 8000284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000288:	6093      	str	r3, [r2, #8]

	/*5) PLL settings*/
	RCC->PLLCFGR = (PLL_M <<0) | (PLL_N << 6) | (PLL_P <<16) | (1<<22);
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <clock_config+0xcc>)
 800028c:	4a13      	ldr	r2, [pc, #76]	; (80002dc <clock_config+0xd8>)
 800028e:	605a      	str	r2, [r3, #4]

	/*6)Enable the PLL and wait for it to become ready*/
	RCC -> CR |= RCC_CR_PLLON;
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <clock_config+0xcc>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <clock_config+0xcc>)
 8000296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800029a:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_PLLRDY));
 800029c:	bf00      	nop
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <clock_config+0xcc>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f9      	beq.n	800029e <clock_config+0x9a>

	/*7) Set clock source and wait for it to become ready*/
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <clock_config+0xcc>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	4a08      	ldr	r2, [pc, #32]	; (80002d0 <clock_config+0xcc>)
 80002b0:	f043 0302 	orr.w	r3, r3, #2
 80002b4:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80002b6:	bf00      	nop
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <clock_config+0xcc>)
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	f003 030c 	and.w	r3, r3, #12
 80002c0:	2b08      	cmp	r3, #8
 80002c2:	d1f9      	bne.n	80002b8 <clock_config+0xb4>





}
 80002c4:	bf00      	nop
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40007000 	.word	0x40007000
 80002d8:	40023c00 	.word	0x40023c00
 80002dc:	00402d04 	.word	0x00402d04

080002e0 <led_init>:

#define GPIOAEN (1U<<0) 	//0x00000001 , for later use to enable clock signal for Port A
#define LED_PIN (1U<<5)

void led_init(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	/*Enable clock access for Port A*/
	RCC -> AHB1ENR |= GPIOAEN;	//setting bit 1 of register RCC_AHB1ENR as high (RM_pg_144)
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <led_init+0x34>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <led_init+0x34>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30

	/*Define pin 5 of PORT A as OUTPUT*/
	GPIOA -> MODER |= (1U << 10);
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <led_init+0x38>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a08      	ldr	r2, [pc, #32]	; (8000318 <led_init+0x38>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~ (1U << 11);	//GPIOX_MODER register use to define output (RM_pg_187)
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <led_init+0x38>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a05      	ldr	r2, [pc, #20]	; (8000318 <led_init+0x38>)
 8000302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000306:	6013      	str	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40023800 	.word	0x40023800
 8000318:	40020000 	.word	0x40020000

0800031c <led_on>:

void led_on(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	/*Enable PA5*/
	GPIOA -> ODR |= LED_PIN;
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <led_on+0x1c>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <led_on+0x1c>)
 8000326:	f043 0320 	orr.w	r3, r3, #32
 800032a:	6153      	str	r3, [r2, #20]
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40020000 	.word	0x40020000

0800033c <led_off>:

void led_off(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	/*Disable PA5*/
	GPIOA -> ODR &= ~LED_PIN;
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <led_off+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <led_off+0x1c>)
 8000346:	f023 0320 	bic.w	r3, r3, #32
 800034a:	6153      	str	r3, [r2, #20]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40020000 	.word	0x40020000

0800035c <main>:
#include "led.h"
#include "clock_setup.h"

int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
	clock_config();
 8000362:	f7ff ff4f 	bl	8000204 <clock_config>
	led_init();
 8000366:	f7ff ffbb 	bl	80002e0 <led_init>
	while(1)
	{
		led_on();
 800036a:	f7ff ffd7 	bl	800031c <led_on>
		for(int i = 0; i<=9000000; i++){}
 800036e:	2300      	movs	r3, #0
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	e002      	b.n	800037a <main+0x1e>
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3301      	adds	r3, #1
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a07      	ldr	r2, [pc, #28]	; (800039c <main+0x40>)
 800037e:	4293      	cmp	r3, r2
 8000380:	ddf8      	ble.n	8000374 <main+0x18>
		led_off();
 8000382:	f7ff ffdb 	bl	800033c <led_off>
		for(int i = 0; i<=10000000; i++){}
 8000386:	2300      	movs	r3, #0
 8000388:	603b      	str	r3, [r7, #0]
 800038a:	e002      	b.n	8000392 <main+0x36>
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	3301      	adds	r3, #1
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	4a02      	ldr	r2, [pc, #8]	; (80003a0 <main+0x44>)
 8000396:	4293      	cmp	r3, r2
 8000398:	ddf8      	ble.n	800038c <main+0x30>
		led_on();
 800039a:	e7e6      	b.n	800036a <main+0xe>
 800039c:	00895440 	.word	0x00895440
 80003a0:	00989680 	.word	0x00989680

080003a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a4:	480d      	ldr	r0, [pc, #52]	; (80003dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	; (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	; (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d2:	f000 f811 	bl	80003f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d6:	f7ff ffc1 	bl	800035c <main>

080003da <LoopForever>:

LoopForever:
  b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   r0, =_estack
 80003dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e8:	08000460 	.word	0x08000460
  ldr r2, =_sbss
 80003ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f0:	2000001c 	.word	0x2000001c

080003f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC_IRQHandler>
	...

080003f8 <__libc_init_array>:
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4d0d      	ldr	r5, [pc, #52]	; (8000430 <__libc_init_array+0x38>)
 80003fc:	4c0d      	ldr	r4, [pc, #52]	; (8000434 <__libc_init_array+0x3c>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	2600      	movs	r6, #0
 8000404:	42a6      	cmp	r6, r4
 8000406:	d109      	bne.n	800041c <__libc_init_array+0x24>
 8000408:	4d0b      	ldr	r5, [pc, #44]	; (8000438 <__libc_init_array+0x40>)
 800040a:	4c0c      	ldr	r4, [pc, #48]	; (800043c <__libc_init_array+0x44>)
 800040c:	f000 f818 	bl	8000440 <_init>
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	2600      	movs	r6, #0
 8000416:	42a6      	cmp	r6, r4
 8000418:	d105      	bne.n	8000426 <__libc_init_array+0x2e>
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000420:	4798      	blx	r3
 8000422:	3601      	adds	r6, #1
 8000424:	e7ee      	b.n	8000404 <__libc_init_array+0xc>
 8000426:	f855 3b04 	ldr.w	r3, [r5], #4
 800042a:	4798      	blx	r3
 800042c:	3601      	adds	r6, #1
 800042e:	e7f2      	b.n	8000416 <__libc_init_array+0x1e>
 8000430:	08000458 	.word	0x08000458
 8000434:	08000458 	.word	0x08000458
 8000438:	08000458 	.word	0x08000458
 800043c:	0800045c 	.word	0x0800045c

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
