
3_timebase_initialization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000360  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000524  08000524  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000524  08000524  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000524  08000524  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000524  08000524  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000524  08000524  00010524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000528  08000528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800052c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000530  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000530  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a2e  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000042a  00000000  00000000  00020aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f8  00000000  00000000  00020ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a2  00000000  00000000  00020fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001998e  00000000  00000000  0002106a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000179e  00000000  00000000  0003a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ec88  00000000  00000000  0003c196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000240  00000000  00000000  000cae20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cb060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800050c 	.word	0x0800050c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800050c 	.word	0x0800050c

08000204 <led_init>:

#define GPIOAEN (1U<<0) 	//0x00000001 , for later use to enable clock signal for Port A
#define LED_PIN (1U<<5)

void led_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/*Enable clock access for Port A*/
	RCC -> AHB1ENR |= GPIOAEN;	//setting bit 1 of register RCC_AHB1ENR as high (RM_pg_144)
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <led_init+0x34>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <led_init+0x34>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

	/*Define pin 5 of PORT A as OUTPUT*/
	GPIOA -> MODER |= (1U << 10);
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <led_init+0x38>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a08      	ldr	r2, [pc, #32]	; (800023c <led_init+0x38>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~ (1U << 11);	//GPIOX_MODER register use to define output (RM_pg_187)
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <led_init+0x38>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a05      	ldr	r2, [pc, #20]	; (800023c <led_init+0x38>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800022a:	6013      	str	r3, [r2, #0]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40023800 	.word	0x40023800
 800023c:	40020000 	.word	0x40020000

08000240 <main>:
#include "timebase.h"



int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
	led_init();
 8000246:	f7ff ffdd 	bl	8000204 <led_init>
	_uart_tx_init();
 800024a:	f000 f88b 	bl	8000364 <_uart_tx_init>
	timebase_init();
 800024e:	f000 f855 	bl	80002fc <timebase_init>
	char x = 'k';
 8000252:	236b      	movs	r3, #107	; 0x6b
 8000254:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
//		led_on();
		//putchar('\n');
		delay(1);
 8000256:	2001      	movs	r0, #1
 8000258:	f000 f806 	bl	8000268 <delay>
		putchar(x);
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	4618      	mov	r0, r3
 8000260:	f000 f874 	bl	800034c <putchar>
		delay(1);
 8000264:	e7f7      	b.n	8000256 <main+0x16>
	...

08000268 <delay>:
volatile uint32_t g_curr_tick;
volatile uint32_t g_curr_tick_p;
volatile uint32_t tick_freq = 1;

void delay(uint32_t delay)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = get_tick();
 8000270:	f000 f82e 	bl	80002d0 <get_tick>
 8000274:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000280:	d004      	beq.n	800028c <delay+0x24>
	{
		wait += (uint32_t)(tick_freq);
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <delay+0x40>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	4413      	add	r3, r2
 800028a:	60fb      	str	r3, [r7, #12]
	}
	while ((get_tick() - tickstart) < wait){}
 800028c:	bf00      	nop
 800028e:	f000 f81f 	bl	80002d0 <get_tick>
 8000292:	4602      	mov	r2, r0
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	1ad3      	subs	r3, r2, r3
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	429a      	cmp	r2, r3
 800029c:	d8f7      	bhi.n	800028e <delay+0x26>
}
 800029e:	bf00      	nop
 80002a0:	bf00      	nop
 80002a2:	3710      	adds	r7, #16
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000000 	.word	0x20000000

080002ac <tick_increment>:


void tick_increment(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	g_curr_tick += tick_freq;
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <tick_increment+0x1c>)
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <tick_increment+0x20>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4413      	add	r3, r2
 80002ba:	4a04      	ldr	r2, [pc, #16]	; (80002cc <tick_increment+0x20>)
 80002bc:	6013      	str	r3, [r2, #0]
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	20000000 	.word	0x20000000
 80002cc:	20000020 	.word	0x20000020

080002d0 <get_tick>:

uint32_t get_tick(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d4:	b672      	cpsid	i
}
 80002d6:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <get_tick+0x24>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <get_tick+0x28>)
 80002de:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80002e0:	b662      	cpsie	i
}
 80002e2:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 80002e4:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <get_tick+0x28>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000020 	.word	0x20000020
 80002f8:	20000024 	.word	0x20000024

080002fc <timebase_init>:



void timebase_init(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	/*Reload the timer with number of cycles per second*/
	SysTick -> LOAD = ONE_SEC_LOAD -1;
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <timebase_init+0x3c>)
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <timebase_init+0x40>)
 8000304:	605a      	str	r2, [r3, #4]

	/*Clear SysTick current value register*/
	SysTick -> VAL = 0;
 8000306:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <timebase_init+0x3c>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]

	/*Select internal clock source*/
	SysTick -> CTRL = CTRL_CLCKSRC;
 800030c:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <timebase_init+0x3c>)
 800030e:	2204      	movs	r2, #4
 8000310:	601a      	str	r2, [r3, #0]

	/*Enable interrupt*/
	SysTick -> CTRL |= CTRL_TICKINT ;
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <timebase_init+0x3c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a08      	ldr	r2, [pc, #32]	; (8000338 <timebase_init+0x3c>)
 8000318:	f043 0302 	orr.w	r3, r3, #2
 800031c:	6013      	str	r3, [r2, #0]

	/*Enable SysTick*/
	SysTick -> CTRL |= CTRL_ENABLE ;
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <timebase_init+0x3c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a05      	ldr	r2, [pc, #20]	; (8000338 <timebase_init+0x3c>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800032a:	b662      	cpsie	i
}
 800032c:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000e010 	.word	0xe000e010
 800033c:	00f423ff 	.word	0x00f423ff

08000340 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	tick_increment();
 8000344:	f7ff ffb2 	bl	80002ac <tick_increment>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}

0800034c <putchar>:
static uint16_t _compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int putchar(int ch)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f000 f84f 	bl	80003f8 <uart_write>
	return ch;
 800035a:	687b      	ldr	r3, [r7, #4]
}
 800035c:	4618      	mov	r0, r3
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <_uart_tx_init>:

void _uart_tx_init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	/*Enable clock access for PORT A because USART2 pins are in PORT A DS_pg_16*/
	RCC -> AHB1ENR |= GPIOAEN;	//setting bit 1 of register RCC_AHB1ENR as high (RM_pg_144)
 8000368:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <_uart_tx_init+0x84>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a1e      	ldr	r2, [pc, #120]	; (80003e8 <_uart_tx_init+0x84>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 (USART2_Tx) as alternate function mode (Direction Register)*/
	GPIOA -> MODER |= (1U<<5);
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <_uart_tx_init+0x88>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <_uart_tx_init+0x88>)
 800037a:	f043 0320 	orr.w	r3, r3, #32
 800037e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U<<4);
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <_uart_tx_init+0x88>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a19      	ldr	r2, [pc, #100]	; (80003ec <_uart_tx_init+0x88>)
 8000386:	f023 0310 	bic.w	r3, r3, #16
 800038a:	6013      	str	r3, [r2, #0]

	/*Define af as AF07 DS_pg_48*/
	GPIOA -> AFR[0] |= (1U << 8);
 800038c:	4b17      	ldr	r3, [pc, #92]	; (80003ec <_uart_tx_init+0x88>)
 800038e:	6a1b      	ldr	r3, [r3, #32]
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <_uart_tx_init+0x88>)
 8000392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000396:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U << 9);
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <_uart_tx_init+0x88>)
 800039a:	6a1b      	ldr	r3, [r3, #32]
 800039c:	4a13      	ldr	r2, [pc, #76]	; (80003ec <_uart_tx_init+0x88>)
 800039e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003a2:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U << 10);
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <_uart_tx_init+0x88>)
 80003a6:	6a1b      	ldr	r3, [r3, #32]
 80003a8:	4a10      	ldr	r2, [pc, #64]	; (80003ec <_uart_tx_init+0x88>)
 80003aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ae:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U << 11);		//GPIOX_AFRL register RM_pg_191, setting AF7 = 0111
 80003b0:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <_uart_tx_init+0x88>)
 80003b2:	6a1b      	ldr	r3, [r3, #32]
 80003b4:	4a0d      	ldr	r2, [pc, #52]	; (80003ec <_uart_tx_init+0x88>)
 80003b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003ba:	6213      	str	r3, [r2, #32]


	/*Enable clock access to USART2 (APB1 bus)*/
	RCC -> APB1ENR |= UART2EN;
 80003bc:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <_uart_tx_init+0x84>)
 80003be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c0:	4a09      	ldr	r2, [pc, #36]	; (80003e8 <_uart_tx_init+0x84>)
 80003c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c6:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baud rate*/
	uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 80003c8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80003cc:	4808      	ldr	r0, [pc, #32]	; (80003f0 <_uart_tx_init+0x8c>)
 80003ce:	f000 f83b 	bl	8000448 <uart_set_baudrate>

	/*Configure transfer direction*/
	USART2 -> CR1 = CR1_TE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <_uart_tx_init+0x90>)
 80003d4:	2208      	movs	r2, #8
 80003d6:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	USART2 -> CR1 |= USART_CR1_UE;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <_uart_tx_init+0x90>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	4a05      	ldr	r2, [pc, #20]	; (80003f4 <_uart_tx_init+0x90>)
 80003de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003e2:	60d3      	str	r3, [r2, #12]

}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020000 	.word	0x40020000
 80003f0:	00f42400 	.word	0x00f42400
 80003f4:	40004400 	.word	0x40004400

080003f8 <uart_write>:

static void uart_write(int ch)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	/*Empty the transmit register*/
	while(!(USART2 -> SR) & (1 << 7)) {}
 8000400:	bf00      	nop
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <uart_write+0x24>)
 8000404:	681b      	ldr	r3, [r3, #0]
	//while (!(USART2->SR & USART_SR_TXE)) {}

	/*Write to transmit data register*/
	USART2 -> DR = (ch & 0xFF);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <uart_write+0x24>)
 800040a:	b2db      	uxtb	r3, r3
 800040c:	6053      	str	r3, [r2, #4]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40004400 	.word	0x40004400

08000420 <_compute_uart_bd>:

static uint16_t _compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	085a      	lsrs	r2, r3, #1
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	441a      	add	r2, r3
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	fbb2 f3f3 	udiv	r3, r2, r3
 8000438:	b29b      	uxth	r3, r3
	  //return (periph_clk / baudrate);
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
	...

08000448 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
	USART2 -> BRR = _compute_uart_bd(periph_clk, baudrate);
 8000452:	6839      	ldr	r1, [r7, #0]
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff ffe3 	bl	8000420 <_compute_uart_bd>
 800045a:	4603      	mov	r3, r0
 800045c:	461a      	mov	r2, r3
 800045e:	4b03      	ldr	r3, [pc, #12]	; (800046c <uart_set_baudrate+0x24>)
 8000460:	609a      	str	r2, [r3, #8]
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40004400 	.word	0x40004400

08000470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000470:	480d      	ldr	r0, [pc, #52]	; (80004a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000472:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000474:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000478:	480c      	ldr	r0, [pc, #48]	; (80004ac <LoopForever+0x6>)
  ldr r1, =_edata
 800047a:	490d      	ldr	r1, [pc, #52]	; (80004b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800047c:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <LoopForever+0xe>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000480:	e002      	b.n	8000488 <LoopCopyDataInit>

08000482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000486:	3304      	adds	r3, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800048c:	d3f9      	bcc.n	8000482 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048e:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000490:	4c0a      	ldr	r4, [pc, #40]	; (80004bc <LoopForever+0x16>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000494:	e001      	b.n	800049a <LoopFillZerobss>

08000496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000498:	3204      	adds	r2, #4

0800049a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800049c:	d3fb      	bcc.n	8000496 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049e:	f000 f811 	bl	80004c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a2:	f7ff fecd 	bl	8000240 <main>

080004a6 <LoopForever>:

LoopForever:
  b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   r0, =_estack
 80004a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004b4:	0800052c 	.word	0x0800052c
  ldr r2, =_sbss
 80004b8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004bc:	20000028 	.word	0x20000028

080004c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC_IRQHandler>
	...

080004c4 <__libc_init_array>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	4d0d      	ldr	r5, [pc, #52]	; (80004fc <__libc_init_array+0x38>)
 80004c8:	4c0d      	ldr	r4, [pc, #52]	; (8000500 <__libc_init_array+0x3c>)
 80004ca:	1b64      	subs	r4, r4, r5
 80004cc:	10a4      	asrs	r4, r4, #2
 80004ce:	2600      	movs	r6, #0
 80004d0:	42a6      	cmp	r6, r4
 80004d2:	d109      	bne.n	80004e8 <__libc_init_array+0x24>
 80004d4:	4d0b      	ldr	r5, [pc, #44]	; (8000504 <__libc_init_array+0x40>)
 80004d6:	4c0c      	ldr	r4, [pc, #48]	; (8000508 <__libc_init_array+0x44>)
 80004d8:	f000 f818 	bl	800050c <_init>
 80004dc:	1b64      	subs	r4, r4, r5
 80004de:	10a4      	asrs	r4, r4, #2
 80004e0:	2600      	movs	r6, #0
 80004e2:	42a6      	cmp	r6, r4
 80004e4:	d105      	bne.n	80004f2 <__libc_init_array+0x2e>
 80004e6:	bd70      	pop	{r4, r5, r6, pc}
 80004e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ec:	4798      	blx	r3
 80004ee:	3601      	adds	r6, #1
 80004f0:	e7ee      	b.n	80004d0 <__libc_init_array+0xc>
 80004f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f6:	4798      	blx	r3
 80004f8:	3601      	adds	r6, #1
 80004fa:	e7f2      	b.n	80004e2 <__libc_init_array+0x1e>
 80004fc:	08000524 	.word	0x08000524
 8000500:	08000524 	.word	0x08000524
 8000504:	08000524 	.word	0x08000524
 8000508:	08000528 	.word	0x08000528

0800050c <_init>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr

08000518 <_fini>:
 8000518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051a:	bf00      	nop
 800051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051e:	bc08      	pop	{r3}
 8000520:	469e      	mov	lr, r3
 8000522:	4770      	bx	lr
