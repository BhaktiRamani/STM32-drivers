
8_timer6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  4 .ARM          00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800040c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800040c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007da  00000000  00000000  0001047f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000268  00000000  00000000  00010c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00010ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006a  00000000  00000000  00010f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000029e  00000000  00000000  00010fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f6b  00000000  00000000  00011278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b119  00000000  00000000  000121e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000144  00000000  00000000  0009d2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0009d440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003ec 	.word	0x080003ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003ec 	.word	0x080003ec

08000204 <led_init>:

#define GPIOAEN (1U<<0) 	//0x00000001 , for later use to enable clock signal for Port A
#define LED_PIN (1U<<5)

void led_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/*Enable clock access for Port A*/
	RCC -> AHB1ENR |= GPIOAEN;				//setting bit 1 of register RCC_AHB1ENR as high (RM_pg_144)
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <led_init+0x34>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <led_init+0x34>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

	/*Define pin 5 of PORT A as OUTPUT*/
	GPIOA -> MODER |= (1U << 10);
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <led_init+0x38>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a08      	ldr	r2, [pc, #32]	; (800023c <led_init+0x38>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~ (1U << 11);			//GPIOX_MODER register use to define output (RM_pg_187)
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <led_init+0x38>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a05      	ldr	r2, [pc, #20]	; (800023c <led_init+0x38>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800022a:	6013      	str	r3, [r2, #0]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40023800 	.word	0x40023800
 800023c:	40020000 	.word	0x40020000

08000240 <led_on>:

void led_on(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	/*Enable PA5*/
	GPIOA -> ODR |= LED_PIN;
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <led_on+0x1c>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	4a04      	ldr	r2, [pc, #16]	; (800025c <led_on+0x1c>)
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	6153      	str	r3, [r2, #20]
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40020000 	.word	0x40020000

08000260 <led_off>:

void led_off(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
	/*Disable PA5*/
	GPIOA -> ODR &= ~LED_PIN;
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <led_off+0x1c>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	4a04      	ldr	r2, [pc, #16]	; (800027c <led_off+0x1c>)
 800026a:	f023 0320 	bic.w	r3, r3, #32
 800026e:	6153      	str	r3, [r2, #20]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40020000 	.word	0x40020000

08000280 <main>:
#include "led.h"
//#include "clock_setup.h"
#include "timer6.h"

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	//clock_config();
	led_init();
 8000284:	f7ff ffbe 	bl	8000204 <led_init>
	TIM6Config();
 8000288:	f000 f80c 	bl	80002a4 <TIM6Config>
	while(1)
	{
		led_on();
 800028c:	f7ff ffd8 	bl	8000240 <led_on>
		Delay_ms(1);
 8000290:	2001      	movs	r0, #1
 8000292:	f000 f845 	bl	8000320 <Delay_ms>
		//Delay_us(1000);
		led_off();
 8000296:	f7ff ffe3 	bl	8000260 <led_off>
		Delay_ms(2);
 800029a:	2002      	movs	r0, #2
 800029c:	f000 f840 	bl	8000320 <Delay_ms>
		led_on();
 80002a0:	e7f4      	b.n	800028c <main+0xc>
	...

080002a4 <TIM6Config>:
#include "timer6.h"



void TIM6Config(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	 * 2. Set the prescaler and the ARR
	 * 3. Enable the Timer, and wait for the update flag to set
	 */

	// Enable Timer clock
	RCC -> APB1ENR |= (1<<4); 		//enable the timer6 clock
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <TIM6Config+0x44>)
 80002aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ac:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <TIM6Config+0x44>)
 80002ae:	f043 0310 	orr.w	r3, r3, #16
 80002b2:	6413      	str	r3, [r2, #64]	; 0x40

	//Set the prescaler (setting clock for timer counter)
	TIM6 -> PSC = 45-1; 			// 42Mhz/42 = 1 Mhz -- 1us
 80002b4:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <TIM6Config+0x48>)
 80002b6:	222c      	movs	r2, #44	; 0x2c
 80002b8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6 -> ARR = 0xffff; 			//Max ARR value
 80002ba:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <TIM6Config+0x48>)
 80002bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002c0:	62da      	str	r2, [r3, #44]	; 0x2c

	//Enable the Timer, and wait for the update flag to set
	TIM6 -> CR1  |= (1<<0); 		//Enable the counter
 80002c2:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <TIM6Config+0x48>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a09      	ldr	r2, [pc, #36]	; (80002ec <TIM6Config+0x48>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6013      	str	r3, [r2, #0]
	while(!(TIM6 -> SR & (1<<0))); 		//UIF - Updated Interrupt flag. This bit is set by hardware when registers are updated.
 80002ce:	bf00      	nop
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <TIM6Config+0x48>)
 80002d2:	691b      	ldr	r3, [r3, #16]
 80002d4:	f003 0301 	and.w	r3, r3, #1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f9      	beq.n	80002d0 <TIM6Config+0x2c>

}
 80002dc:	bf00      	nop
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	40023800 	.word	0x40023800
 80002ec:	40001000 	.word	0x40001000

080002f0 <Delay_us>:

void Delay_us(uint16_t us)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	80fb      	strh	r3, [r7, #6]
	/*---------STEPS-------------*/
	/* 1. Reset the Counter
	 * 2. Wait for the Counter to reach the entered value. As each count will take
	 * 1 us, the total waiting time will be required us delay   */
	TIM6->CNT = 0;
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <Delay_us+0x2c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	625a      	str	r2, [r3, #36]	; 0x24
	while( TIM6 -> CNT < us){};
 8000300:	bf00      	nop
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <Delay_us+0x2c>)
 8000304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000306:	88fb      	ldrh	r3, [r7, #6]
 8000308:	429a      	cmp	r2, r3
 800030a:	d3fa      	bcc.n	8000302 <Delay_us+0x12>


}
 800030c:	bf00      	nop
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40001000 	.word	0x40001000

08000320 <Delay_ms>:

void Delay_ms(uint16_t ms)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i<ms; i++)
 800032a:	2300      	movs	r3, #0
 800032c:	81fb      	strh	r3, [r7, #14]
 800032e:	e006      	b.n	800033e <Delay_ms+0x1e>
	{
		Delay_us (1000); 				//delay of 1 ms
 8000330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000334:	f7ff ffdc 	bl	80002f0 <Delay_us>
	for(uint16_t i = 0; i<ms; i++)
 8000338:	89fb      	ldrh	r3, [r7, #14]
 800033a:	3301      	adds	r3, #1
 800033c:	81fb      	strh	r3, [r7, #14]
 800033e:	89fa      	ldrh	r2, [r7, #14]
 8000340:	88fb      	ldrh	r3, [r7, #6]
 8000342:	429a      	cmp	r2, r3
 8000344:	d3f4      	bcc.n	8000330 <Delay_ms+0x10>
	}
}
 8000346:	bf00      	nop
 8000348:	bf00      	nop
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000352:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000354:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 800035a:	490d      	ldr	r1, [pc, #52]	; (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800035c:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <LoopForever+0x16>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037e:	f000 f811 	bl	80003a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ff7d 	bl	8000280 <main>

08000386 <LoopForever>:

LoopForever:
  b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   r0, =_estack
 8000388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000394:	0800040c 	.word	0x0800040c
  ldr r2, =_sbss
 8000398:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800039c:	2000001c 	.word	0x2000001c

080003a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC_IRQHandler>
	...

080003a4 <__libc_init_array>:
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	4d0d      	ldr	r5, [pc, #52]	; (80003dc <__libc_init_array+0x38>)
 80003a8:	4c0d      	ldr	r4, [pc, #52]	; (80003e0 <__libc_init_array+0x3c>)
 80003aa:	1b64      	subs	r4, r4, r5
 80003ac:	10a4      	asrs	r4, r4, #2
 80003ae:	2600      	movs	r6, #0
 80003b0:	42a6      	cmp	r6, r4
 80003b2:	d109      	bne.n	80003c8 <__libc_init_array+0x24>
 80003b4:	4d0b      	ldr	r5, [pc, #44]	; (80003e4 <__libc_init_array+0x40>)
 80003b6:	4c0c      	ldr	r4, [pc, #48]	; (80003e8 <__libc_init_array+0x44>)
 80003b8:	f000 f818 	bl	80003ec <_init>
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	10a4      	asrs	r4, r4, #2
 80003c0:	2600      	movs	r6, #0
 80003c2:	42a6      	cmp	r6, r4
 80003c4:	d105      	bne.n	80003d2 <__libc_init_array+0x2e>
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003cc:	4798      	blx	r3
 80003ce:	3601      	adds	r6, #1
 80003d0:	e7ee      	b.n	80003b0 <__libc_init_array+0xc>
 80003d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d6:	4798      	blx	r3
 80003d8:	3601      	adds	r6, #1
 80003da:	e7f2      	b.n	80003c2 <__libc_init_array+0x1e>
 80003dc:	08000404 	.word	0x08000404
 80003e0:	08000404 	.word	0x08000404
 80003e4:	08000404 	.word	0x08000404
 80003e8:	08000408 	.word	0x08000408

080003ec <_init>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr

080003f8 <_fini>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr
