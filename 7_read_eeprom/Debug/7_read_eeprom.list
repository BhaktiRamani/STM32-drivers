
7_read_eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003ec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005b0  080005b0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005b0  080005b0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005b0  080005b0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005b0  080005b0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005b0  080005b0  000105b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005b4  080005b4  000105b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080005bc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080005bc  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a98  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000047b  00000000  00000000  00020b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f8  00000000  00000000  00020f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a2  00000000  00000000  00021088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001133  00000000  00000000  0002112a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001917  00000000  00000000  0002225d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ecfc  00000000  00000000  00023b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000240  00000000  00000000  000b2870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b2ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000598 	.word	0x08000598

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000598 	.word	0x08000598

08000204 <main>:
#include "port.h"



int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	_uart_tx_init();
 8000208:	f000 f8f2 	bl	80003f0 <_uart_tx_init>
	_port_init();
 800020c:	f000 f80e 	bl	800022c <_port_init>
	timebase_init();
 8000210:	f000 f8ba 	bl	8000388 <timebase_init>
	//char h = 'h';
	//char l = 'l';
	//write_address(0x11);
	//putchar(h);
	write_address(0x12);
 8000214:	2012      	movs	r0, #18
 8000216:	f000 f83f 	bl	8000298 <write_address>
	read_eeprom();
 800021a:	f000 f84d 	bl	80002b8 <read_eeprom>
	delay(1);
 800021e:	2001      	movs	r0, #1
 8000220:	f000 f890 	bl	8000344 <delay>
 8000224:	2300      	movs	r3, #0
//		GPIOC -> MODER = (0x5555);
//
//		write_eeprom(data);
//	}

}
 8000226:	4618      	mov	r0, r3
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <_port_init>:
#define GPIOCEN (1<<2);
#define WE (1<<9);
#define OE (1<<8);

void _port_init(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	/*Setup Clock for Port B*/
	RCC -> AHB1ENR |= GPIOBEN;
 8000230:	4b16      	ldr	r3, [pc, #88]	; (800028c <_port_init+0x60>)
 8000232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000234:	4a15      	ldr	r2, [pc, #84]	; (800028c <_port_init+0x60>)
 8000236:	f043 0302 	orr.w	r3, r3, #2
 800023a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC -> AHB1ENR |= GPIOCEN;
 800023c:	4b13      	ldr	r3, [pc, #76]	; (800028c <_port_init+0x60>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000240:	4a12      	ldr	r2, [pc, #72]	; (800028c <_port_init+0x60>)
 8000242:	f043 0304 	orr.w	r3, r3, #4
 8000246:	6313      	str	r3, [r2, #48]	; 0x30

	/*Define Pin B0-B5 as GPIO output pins using GPIOx_MODER*/
	//GPIOB -> MODER &= ~(0xFFFFFFFF);
	GPIOB -> MODER = (0x55555555);
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <_port_init+0x64>)
 800024a:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 800024e:	601a      	str	r2, [r3, #0]
	//GPIOC -> MODER &= ~(0xFFFF);
	//GPIOD -> MODER &= ~(1<<4);
	//GPIOD -> MODER &= ~(1<<5);

	/*Define Pin C8-C9 as GPIO output pins*/
	GPIOC -> MODER &= ~(1<<19);
 8000250:	4b10      	ldr	r3, [pc, #64]	; (8000294 <_port_init+0x68>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a0f      	ldr	r2, [pc, #60]	; (8000294 <_port_init+0x68>)
 8000256:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800025a:	6013      	str	r3, [r2, #0]
	GPIOC -> MODER &= ~(1<<17);
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <_port_init+0x68>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <_port_init+0x68>)
 8000262:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000266:	6013      	str	r3, [r2, #0]
	GPIOC -> MODER |= (1<<16);
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <_port_init+0x68>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a09      	ldr	r2, [pc, #36]	; (8000294 <_port_init+0x68>)
 800026e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000272:	6013      	str	r3, [r2, #0]
	GPIOC -> MODER |= (1<<18);
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <_port_init+0x68>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a06      	ldr	r2, [pc, #24]	; (8000294 <_port_init+0x68>)
 800027a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800027e:	6013      	str	r3, [r2, #0]



}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40023800 	.word	0x40023800
 8000290:	40020400 	.word	0x40020400
 8000294:	40020800 	.word	0x40020800

08000298 <write_address>:


void write_address(uint16_t data)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	80fb      	strh	r3, [r7, #6]
	GPIOB -> ODR = data;
 80002a2:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <write_address+0x1c>)
 80002a4:	88fb      	ldrh	r3, [r7, #6]
 80002a6:	6153      	str	r3, [r2, #20]
}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	40020400 	.word	0x40020400

080002b8 <read_eeprom>:

uint32_t read_eeprom(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
//	uint16_t data = 0;
//	data = (uint16_t)GPIOC -> IDR & 0xff;
//	return data;

	/*Define Pin C0-C7 as GPIO input pins using GPIOx_MODER*/
	GPIOC -> MODER &= ~(0xFFFF);
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <read_eeprom+0x38>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <read_eeprom+0x38>)
 80002c2:	0c1b      	lsrs	r3, r3, #16
 80002c4:	041b      	lsls	r3, r3, #16
 80002c6:	6013      	str	r3, [r2, #0]
	GPIOC -> ODR &= ~OE;
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <read_eeprom+0x38>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a08      	ldr	r2, [pc, #32]	; (80002f0 <read_eeprom+0x38>)
 80002ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002d2:	6153      	str	r3, [r2, #20]
	GPIOC -> ODR |= WE;
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <read_eeprom+0x38>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a05      	ldr	r2, [pc, #20]	; (80002f0 <read_eeprom+0x38>)
 80002da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002de:	6153      	str	r3, [r2, #20]

	/*Define Pin C8(OE) = low and C9(WE) = high */
	putchar(GPIOC->IDR);
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <read_eeprom+0x38>)
 80002e2:	691b      	ldr	r3, [r3, #16]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f877 	bl	80003d8 <putchar>
	return 0;
 80002ea:	2300      	movs	r3, #0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40020800 	.word	0x40020800

080002f4 <tick_increment>:
#define CLOCK_CYCLES_PER_NS (ONE_SEC_LOAD / 1000000000);

volatile uint32_t g_curr_tick;
volatile uint32_t g_curr_tick_p;
volatile uint32_t tick_freq = 1;

 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0

 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <tick_increment+0x1c>)
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <tick_increment+0x20>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4413      	add	r3, r2
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <tick_increment+0x20>)
 8000304:	6013      	str	r3, [r2, #0]
void tick_increment(void)
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	20000000 	.word	0x20000000
 8000314:	20000020 	.word	0x20000020

08000318 <get_tick>:
{
	g_curr_tick += tick_freq;
}
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800031c:	b672      	cpsid	i
}
 800031e:	bf00      	nop

uint32_t get_tick(void)
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <get_tick+0x24>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a06      	ldr	r2, [pc, #24]	; (8000340 <get_tick+0x28>)
 8000326:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000328:	b662      	cpsie	i
}
 800032a:	bf00      	nop
{
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <get_tick+0x28>)
 800032e:	681b      	ldr	r3, [r3, #0]
	__enable_irq();
 8000330:	4618      	mov	r0, r3
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	20000020 	.word	0x20000020
 8000340:	20000024 	.word	0x20000024

08000344 <delay>:

	return g_curr_tick_p;
}
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]

 800034c:	f7ff ffe4 	bl	8000318 <get_tick>
 8000350:	60b8      	str	r0, [r7, #8]
void delay(uint32_t delay)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	60fb      	str	r3, [r7, #12]
{
	uint32_t tickstart = get_tick();
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800035c:	d004      	beq.n	8000368 <delay+0x24>
	uint32_t wait = delay;

 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <delay+0x40>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	68fa      	ldr	r2, [r7, #12]
 8000364:	4413      	add	r3, r2
 8000366:	60fb      	str	r3, [r7, #12]
	if(wait < MAX_DELAY)
	{
 8000368:	bf00      	nop
 800036a:	f7ff ffd5 	bl	8000318 <get_tick>
 800036e:	4602      	mov	r2, r0
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	1ad3      	subs	r3, r2, r3
 8000374:	68fa      	ldr	r2, [r7, #12]
 8000376:	429a      	cmp	r2, r3
 8000378:	d8f7      	bhi.n	800036a <delay+0x26>
		wait += (uint32_t)(tick_freq);
 800037a:	bf00      	nop
 800037c:	bf00      	nop
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000000 	.word	0x20000000

08000388 <timebase_init>:
	}
	while ((get_tick() - tickstart) < wait){}
}
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

void delay_ns(uint32_t delay_ns)
 800038c:	4b0d      	ldr	r3, [pc, #52]	; (80003c4 <timebase_init+0x3c>)
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <timebase_init+0x40>)
 8000390:	605a      	str	r2, [r3, #4]
{
    uint32_t delay_cycles = delay_ns * CLOCK_CYCLES_PER_NS;
    uint32_t tickstart = get_tick();
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <timebase_init+0x3c>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
    uint32_t wait = delay_cycles;

    if (wait < MAX_DELAY)
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <timebase_init+0x3c>)
 800039a:	2204      	movs	r2, #4
 800039c:	601a      	str	r2, [r3, #0]
    {
        wait += (uint32_t)(tick_freq);
    }
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <timebase_init+0x3c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a08      	ldr	r2, [pc, #32]	; (80003c4 <timebase_init+0x3c>)
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	6013      	str	r3, [r2, #0]

    while ((get_tick() - tickstart) < wait){}
}
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <timebase_init+0x3c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a05      	ldr	r2, [pc, #20]	; (80003c4 <timebase_init+0x3c>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80003b6:	b662      	cpsie	i
}
 80003b8:	bf00      	nop

void timebase_init(void)
{
	/*Reload the timer with number of cycles per second*/
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	e000e010 	.word	0xe000e010
 80003c8:	00f423ff 	.word	0x00f423ff

080003cc <SysTick_Handler>:
	SysTick -> LOAD = ONE_SEC_LOAD -1;

	/*Clear SysTick current value register*/
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	SysTick -> VAL = 0;
 80003d0:	f7ff ff90 	bl	80002f4 <tick_increment>

 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <putchar>:
static uint16_t _compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int putchar(int ch)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f000 f84f 	bl	8000484 <uart_write>
	return ch;
 80003e6:	687b      	ldr	r3, [r7, #4]
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <_uart_tx_init>:

void _uart_tx_init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	/*Enable clock access for PORT A because USART2 pins are in PORT A DS_pg_16*/
	RCC -> AHB1ENR |= GPIOAEN;	//setting bit 1 of register RCC_AHB1ENR as high (RM_pg_144)
 80003f4:	4b1f      	ldr	r3, [pc, #124]	; (8000474 <_uart_tx_init+0x84>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a1e      	ldr	r2, [pc, #120]	; (8000474 <_uart_tx_init+0x84>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 (USART2_Tx) as alternate function mode (Direction Register)*/
	GPIOA -> MODER |= (1U<<5);
 8000400:	4b1d      	ldr	r3, [pc, #116]	; (8000478 <_uart_tx_init+0x88>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a1c      	ldr	r2, [pc, #112]	; (8000478 <_uart_tx_init+0x88>)
 8000406:	f043 0320 	orr.w	r3, r3, #32
 800040a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U<<4);
 800040c:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <_uart_tx_init+0x88>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a19      	ldr	r2, [pc, #100]	; (8000478 <_uart_tx_init+0x88>)
 8000412:	f023 0310 	bic.w	r3, r3, #16
 8000416:	6013      	str	r3, [r2, #0]

	/*Define af as AF07 DS_pg_48*/
	GPIOA -> AFR[0] |= (1U << 8);
 8000418:	4b17      	ldr	r3, [pc, #92]	; (8000478 <_uart_tx_init+0x88>)
 800041a:	6a1b      	ldr	r3, [r3, #32]
 800041c:	4a16      	ldr	r2, [pc, #88]	; (8000478 <_uart_tx_init+0x88>)
 800041e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000422:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U << 9);
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <_uart_tx_init+0x88>)
 8000426:	6a1b      	ldr	r3, [r3, #32]
 8000428:	4a13      	ldr	r2, [pc, #76]	; (8000478 <_uart_tx_init+0x88>)
 800042a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042e:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U << 10);
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <_uart_tx_init+0x88>)
 8000432:	6a1b      	ldr	r3, [r3, #32]
 8000434:	4a10      	ldr	r2, [pc, #64]	; (8000478 <_uart_tx_init+0x88>)
 8000436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800043a:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U << 11);		//GPIOX_AFRL register RM_pg_191, setting AF7 = 0111
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <_uart_tx_init+0x88>)
 800043e:	6a1b      	ldr	r3, [r3, #32]
 8000440:	4a0d      	ldr	r2, [pc, #52]	; (8000478 <_uart_tx_init+0x88>)
 8000442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000446:	6213      	str	r3, [r2, #32]


	/*Enable clock access to USART2 (APB1 bus)*/
	RCC -> APB1ENR |= UART2EN;
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <_uart_tx_init+0x84>)
 800044a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800044c:	4a09      	ldr	r2, [pc, #36]	; (8000474 <_uart_tx_init+0x84>)
 800044e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000452:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baud rate*/
	uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 8000454:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000458:	4808      	ldr	r0, [pc, #32]	; (800047c <_uart_tx_init+0x8c>)
 800045a:	f000 f83b 	bl	80004d4 <uart_set_baudrate>

	/*Configure transfer direction*/
	USART2 -> CR1 = CR1_TE;
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <_uart_tx_init+0x90>)
 8000460:	2208      	movs	r2, #8
 8000462:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	USART2 -> CR1 |= USART_CR1_UE;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <_uart_tx_init+0x90>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a05      	ldr	r2, [pc, #20]	; (8000480 <_uart_tx_init+0x90>)
 800046a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800046e:	60d3      	str	r3, [r2, #12]

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40023800 	.word	0x40023800
 8000478:	40020000 	.word	0x40020000
 800047c:	00f42400 	.word	0x00f42400
 8000480:	40004400 	.word	0x40004400

08000484 <uart_write>:

static void uart_write(int ch)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	/*Empty the transmit register*/
	while(!(USART2 -> SR) & (1 << 7)) {}
 800048c:	bf00      	nop
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <uart_write+0x24>)
 8000490:	681b      	ldr	r3, [r3, #0]
	//while (!(USART2->SR & USART_SR_TXE)) {}

	/*Write to transmit data register*/
	USART2 -> DR = (ch & 0xFF);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <uart_write+0x24>)
 8000496:	b2db      	uxtb	r3, r3
 8000498:	6053      	str	r3, [r2, #4]
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40004400 	.word	0x40004400

080004ac <_compute_uart_bd>:

static uint16_t _compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	085a      	lsrs	r2, r3, #1
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	441a      	add	r2, r3
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c4:	b29b      	uxth	r3, r3
	  //return (periph_clk / baudrate);
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
	USART2 -> BRR = _compute_uart_bd(periph_clk, baudrate);
 80004de:	6839      	ldr	r1, [r7, #0]
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f7ff ffe3 	bl	80004ac <_compute_uart_bd>
 80004e6:	4603      	mov	r3, r0
 80004e8:	461a      	mov	r2, r3
 80004ea:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <uart_set_baudrate+0x24>)
 80004ec:	609a      	str	r2, [r3, #8]
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40004400 	.word	0x40004400

080004fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000500:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <LoopForever+0x6>)
  ldr r1, =_edata
 8000506:	490d      	ldr	r1, [pc, #52]	; (800053c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <LoopForever+0xe>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800051c:	4c0a      	ldr	r4, [pc, #40]	; (8000548 <LoopForever+0x16>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800052a:	f000 f811 	bl	8000550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff fe69 	bl	8000204 <main>

08000532 <LoopForever>:

LoopForever:
  b LoopForever
 8000532:	e7fe      	b.n	8000532 <LoopForever>
  ldr   r0, =_estack
 8000534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000540:	080005b8 	.word	0x080005b8
  ldr r2, =_sbss
 8000544:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000548:	20000028 	.word	0x20000028

0800054c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC_IRQHandler>
	...

08000550 <__libc_init_array>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	4d0d      	ldr	r5, [pc, #52]	; (8000588 <__libc_init_array+0x38>)
 8000554:	4c0d      	ldr	r4, [pc, #52]	; (800058c <__libc_init_array+0x3c>)
 8000556:	1b64      	subs	r4, r4, r5
 8000558:	10a4      	asrs	r4, r4, #2
 800055a:	2600      	movs	r6, #0
 800055c:	42a6      	cmp	r6, r4
 800055e:	d109      	bne.n	8000574 <__libc_init_array+0x24>
 8000560:	4d0b      	ldr	r5, [pc, #44]	; (8000590 <__libc_init_array+0x40>)
 8000562:	4c0c      	ldr	r4, [pc, #48]	; (8000594 <__libc_init_array+0x44>)
 8000564:	f000 f818 	bl	8000598 <_init>
 8000568:	1b64      	subs	r4, r4, r5
 800056a:	10a4      	asrs	r4, r4, #2
 800056c:	2600      	movs	r6, #0
 800056e:	42a6      	cmp	r6, r4
 8000570:	d105      	bne.n	800057e <__libc_init_array+0x2e>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f855 3b04 	ldr.w	r3, [r5], #4
 8000578:	4798      	blx	r3
 800057a:	3601      	adds	r6, #1
 800057c:	e7ee      	b.n	800055c <__libc_init_array+0xc>
 800057e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000582:	4798      	blx	r3
 8000584:	3601      	adds	r6, #1
 8000586:	e7f2      	b.n	800056e <__libc_init_array+0x1e>
 8000588:	080005b0 	.word	0x080005b0
 800058c:	080005b0 	.word	0x080005b0
 8000590:	080005b0 	.word	0x080005b0
 8000594:	080005b4 	.word	0x080005b4

08000598 <_init>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	bf00      	nop
 800059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059e:	bc08      	pop	{r3}
 80005a0:	469e      	mov	lr, r3
 80005a2:	4770      	bx	lr

080005a4 <_fini>:
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a6:	bf00      	nop
 80005a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005aa:	bc08      	pop	{r3}
 80005ac:	469e      	mov	lr, r3
 80005ae:	4770      	bx	lr
