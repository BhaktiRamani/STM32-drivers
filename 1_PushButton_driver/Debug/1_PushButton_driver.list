
1_PushButton_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000378  08000380  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000378  08000378  00010380  2**0
                  CONTENTS
  4 .ARM          00000000  08000378  08000378  00010380  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000378  08000380  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000378  08000378  00010378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000380  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000380  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010380  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000490  00000000  00000000  000103f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001ac  00000000  00000000  00010883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004b  00000000  00000000  00010aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b20  00000000  00000000  00010af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a4d  00000000  00000000  00029613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b07a  00000000  00000000  0002a060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000cc  00000000  00000000  000b50dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b51a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000360 	.word	0x08000360

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000360 	.word	0x08000360

08000204 <main>:
#include<pushbutton.h>

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	_init_();
 800020a:	f000 f819 	bl	8000240 <_init_>
	while(1)
	{
		if(GPIOC -> IDR & (1U << 13) != 0)
 800020e:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <main+0x34>)
 8000210:	691b      	ldr	r3, [r3, #16]
 8000212:	f003 0301 	and.w	r3, r3, #1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <main+0x1a>
		{
			led_off();
 800021a:	f000 f843 	bl	80002a4 <led_off>
//			for(int i = 0; i <= 90000; i++){}
//			led_off();
//			for(int i = 0; i<= 90000; i++){}
		}

		if(GPIOC -> IDR & (1U << 13) == 0)
 800021e:	4b06      	ldr	r3, [pc, #24]	; (8000238 <main+0x34>)
 8000220:	691b      	ldr	r3, [r3, #16]
//		else
//		{
//			led_on();
//		}

		for(int i = 0; i <= 90000; i++){}
 8000222:	2300      	movs	r3, #0
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	e002      	b.n	800022e <main+0x2a>
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3301      	adds	r3, #1
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4a02      	ldr	r2, [pc, #8]	; (800023c <main+0x38>)
 8000232:	4293      	cmp	r3, r2
 8000234:	ddf8      	ble.n	8000228 <main+0x24>
		if(GPIOC -> IDR & (1U << 13) != 0)
 8000236:	e7ea      	b.n	800020e <main+0xa>
 8000238:	40020800 	.word	0x40020800
 800023c:	00015f90 	.word	0x00015f90

08000240 <_init_>:
#define GPIOAEN (1U<<0)
#define GPIOCEN (1U<<2)
#define LED_PIN (1U<<5)

void _init_(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	/*Enable clock signal for Port A & Port C */
	RCC -> AHB1ENR |= GPIOAEN;
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <_init_+0x58>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a13      	ldr	r2, [pc, #76]	; (8000298 <_init_+0x58>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC -> AHB1ENR |= GPIOCEN;
 8000250:	4b11      	ldr	r3, [pc, #68]	; (8000298 <_init_+0x58>)
 8000252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000254:	4a10      	ldr	r2, [pc, #64]	; (8000298 <_init_+0x58>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 as Output*/
	GPIOA -> MODER |= (1U << 10);
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <_init_+0x5c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a0e      	ldr	r2, [pc, #56]	; (800029c <_init_+0x5c>)
 8000262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000266:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~ (1U << 11);	//GPIOX_MODER register use to define output (RM_pg_187)
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <_init_+0x5c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a0b      	ldr	r2, [pc, #44]	; (800029c <_init_+0x5c>)
 800026e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000272:	6013      	str	r3, [r2, #0]

	/*Set PC13 as Input*/
	GPIOC -> MODER &= ~ (1U << 26);
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <_init_+0x60>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a09      	ldr	r2, [pc, #36]	; (80002a0 <_init_+0x60>)
 800027a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800027e:	6013      	str	r3, [r2, #0]
	GPIOC -> MODER &= ~ (1U << 27);
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <_init_+0x60>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <_init_+0x60>)
 8000286:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800028a:	6013      	str	r3, [r2, #0]

}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40023800 	.word	0x40023800
 800029c:	40020000 	.word	0x40020000
 80002a0:	40020800 	.word	0x40020800

080002a4 <led_off>:
	/*Enable PA5*/
	GPIOA -> ODR |= LED_PIN;
}

void led_off(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	/*Disable PA5*/
	GPIOA -> ODR &= ~LED_PIN;
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <led_off+0x1c>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	4a04      	ldr	r2, [pc, #16]	; (80002c0 <led_off+0x1c>)
 80002ae:	f023 0320 	bic.w	r3, r3, #32
 80002b2:	6153      	str	r3, [r2, #20]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40020000 	.word	0x40020000

080002c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002cc:	480c      	ldr	r0, [pc, #48]	; (8000300 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ce:	490d      	ldr	r1, [pc, #52]	; (8000304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <LoopForever+0xe>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d4:	e002      	b.n	80002dc <LoopCopyDataInit>

080002d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002da:	3304      	adds	r3, #4

080002dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e0:	d3f9      	bcc.n	80002d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e2:	4a0a      	ldr	r2, [pc, #40]	; (800030c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e4:	4c0a      	ldr	r4, [pc, #40]	; (8000310 <LoopForever+0x16>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e8:	e001      	b.n	80002ee <LoopFillZerobss>

080002ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ec:	3204      	adds	r2, #4

080002ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f0:	d3fb      	bcc.n	80002ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f2:	f000 f811 	bl	8000318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ff85 	bl	8000204 <main>

080002fa <LoopForever>:

LoopForever:
  b LoopForever
 80002fa:	e7fe      	b.n	80002fa <LoopForever>
  ldr   r0, =_estack
 80002fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000304:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000308:	08000380 	.word	0x08000380
  ldr r2, =_sbss
 800030c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000310:	2000001c 	.word	0x2000001c

08000314 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000314:	e7fe      	b.n	8000314 <ADC_IRQHandler>
	...

08000318 <__libc_init_array>:
 8000318:	b570      	push	{r4, r5, r6, lr}
 800031a:	4d0d      	ldr	r5, [pc, #52]	; (8000350 <__libc_init_array+0x38>)
 800031c:	4c0d      	ldr	r4, [pc, #52]	; (8000354 <__libc_init_array+0x3c>)
 800031e:	1b64      	subs	r4, r4, r5
 8000320:	10a4      	asrs	r4, r4, #2
 8000322:	2600      	movs	r6, #0
 8000324:	42a6      	cmp	r6, r4
 8000326:	d109      	bne.n	800033c <__libc_init_array+0x24>
 8000328:	4d0b      	ldr	r5, [pc, #44]	; (8000358 <__libc_init_array+0x40>)
 800032a:	4c0c      	ldr	r4, [pc, #48]	; (800035c <__libc_init_array+0x44>)
 800032c:	f000 f818 	bl	8000360 <_init>
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	10a4      	asrs	r4, r4, #2
 8000334:	2600      	movs	r6, #0
 8000336:	42a6      	cmp	r6, r4
 8000338:	d105      	bne.n	8000346 <__libc_init_array+0x2e>
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000340:	4798      	blx	r3
 8000342:	3601      	adds	r6, #1
 8000344:	e7ee      	b.n	8000324 <__libc_init_array+0xc>
 8000346:	f855 3b04 	ldr.w	r3, [r5], #4
 800034a:	4798      	blx	r3
 800034c:	3601      	adds	r6, #1
 800034e:	e7f2      	b.n	8000336 <__libc_init_array+0x1e>
 8000350:	08000378 	.word	0x08000378
 8000354:	08000378 	.word	0x08000378
 8000358:	08000378 	.word	0x08000378
 800035c:	0800037c 	.word	0x0800037c

08000360 <_init>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr

0800036c <_fini>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr
