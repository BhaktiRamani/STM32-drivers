#include "timebase.h"
#include "stm32f4xx.h"

#define ONE_SEC_LOAD 	180000000  			/*Clock = 180 Mhz means 18000000 cycles will run in 1 second*/

#define CTRL_ENABLE  	(1U << 0)
#define CTRL_TICKINT 	(1U << 1)
#define CTRL_CLCKSRC 	(1U << 2)
#define CTRL_COUNTFLAG  (1U << 16)

#define MAX_DELAY 		0XFFFFFFFFU

// Define the number of clock cycles in one nanosecond
#define CLOCK_CYCLES_PER_NS (ONE_SEC_LOAD / 1000000000);

volatile uint32_t g_curr_tick;
volatile uint32_t g_curr_tick_p;
volatile uint32_t tick_freq = 1;


void tick_increment(void)
{
	g_curr_tick += tick_freq;
}

uint32_t get_tick(void)
{
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
	__enable_irq();

	return g_curr_tick_p;
}

void delay(uint32_t delay)
{
	uint32_t tickstart = get_tick();
	uint32_t wait = delay;

	if(wait < MAX_DELAY)
	{
		wait += (uint32_t)(tick_freq);
	}
	while ((get_tick() - tickstart) < wait){}
}

void delay_ns(uint32_t delay_ns)
{
    uint32_t delay_cycles = delay_ns * CLOCK_CYCLES_PER_NS;
    uint32_t tickstart = get_tick();
    uint32_t wait = delay_cycles;

    if (wait < MAX_DELAY)
    {
        wait += (uint32_t)(tick_freq);
    }

    while ((get_tick() - tickstart) < wait){}
}

void timebase_init(void)
{
	/*Reload the timer with number of cycles per second*/
	SysTick -> LOAD = ONE_SEC_LOAD -1;

	/*Clear SysTick current value register*/
	SysTick -> VAL = 0;

	/*Select internal clock source*/
	SysTick -> CTRL = CTRL_CLCKSRC;

	/*Enable interrupt*/
	SysTick -> CTRL |= CTRL_TICKINT ;

	/*Enable SysTick*/
	SysTick -> CTRL |= CTRL_ENABLE ;

	/*Enable global interrupts*/
	__enable_irq();
}

void SysTick_Handler(void)
{
	tick_increment();
}































