
5_RoundRobinScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000464  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000628  08000630  00010630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000628  08000628  00010630  2**0
                  CONTENTS
  4 .ARM          00000000  08000628  08000628  00010630  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000628  08000630  00010630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000628  08000628  00010628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800062c  0800062c  0001062c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000000  08000630  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08000630  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010630  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010660  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000094e  00000000  00000000  000106a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000031d  00000000  00000000  00010ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00011310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000076  00000000  00000000  000113c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000001fa  00000000  00000000  00011436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b9c  00000000  00000000  00011630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b6b8  00000000  00000000  000121cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000198  00000000  00000000  0009d884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0009da1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000610 	.word	0x08000610

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000610 	.word	0x08000610

08000204 <task0>:

typedef uint32_t TaskProfiler;
TaskProfiler Task0_Profiler, Task1_Profiler, Task2_Profiler;

void task0(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	while(1)
	{
		Task0_Profiler++;
 8000208:	4b02      	ldr	r3, [pc, #8]	; (8000214 <task0+0x10>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	3301      	adds	r3, #1
 800020e:	4a01      	ldr	r2, [pc, #4]	; (8000214 <task0+0x10>)
 8000210:	6013      	str	r3, [r2, #0]
 8000212:	e7f9      	b.n	8000208 <task0+0x4>
 8000214:	2000001c 	.word	0x2000001c

08000218 <task1>:
	}
}

void task1(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	while(1)
	{
		Task1_Profiler++;
 800021c:	4b02      	ldr	r3, [pc, #8]	; (8000228 <task1+0x10>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	3301      	adds	r3, #1
 8000222:	4a01      	ldr	r2, [pc, #4]	; (8000228 <task1+0x10>)
 8000224:	6013      	str	r3, [r2, #0]
 8000226:	e7f9      	b.n	800021c <task1+0x4>
 8000228:	20000020 	.word	0x20000020

0800022c <task2>:
	}
}

void task2(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_Profiler++;
 8000230:	4b02      	ldr	r3, [pc, #8]	; (800023c <task2+0x10>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	3301      	adds	r3, #1
 8000236:	4a01      	ldr	r2, [pc, #4]	; (800023c <task2+0x10>)
 8000238:	6013      	str	r3, [r2, #0]
 800023a:	e7f9      	b.n	8000230 <task2+0x4>
 800023c:	20000024 	.word	0x20000024

08000240 <main>:
	}
}


int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	//_uart_tx_init();

	/*Initialize Kernel*/
	osKernelInit();
 8000244:	f000 f95e 	bl	8000504 <osKernelInit>

	/*Add Thread*/
	osKernelAddThreads(&task0, &task1, &task2);
 8000248:	4a05      	ldr	r2, [pc, #20]	; (8000260 <main+0x20>)
 800024a:	4906      	ldr	r1, [pc, #24]	; (8000264 <main+0x24>)
 800024c:	4806      	ldr	r0, [pc, #24]	; (8000268 <main+0x28>)
 800024e:	f000 f91f 	bl	8000490 <osKernelAddThreads>

	/*Set RoundRobin time quanta*/
	osKernelLaunch(QUANTA);
 8000252:	201e      	movs	r0, #30
 8000254:	f000 f964 	bl	8000520 <osKernelLaunch>
 8000258:	2300      	movs	r3, #0



}
 800025a:	4618      	mov	r0, r3
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	0800022d 	.word	0x0800022d
 8000264:	08000219 	.word	0x08000219
 8000268:	08000205 	.word	0x08000205

0800026c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	6039      	str	r1, [r7, #0]
 8000276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027c:	2b00      	cmp	r3, #0
 800027e:	db0a      	blt.n	8000296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	b2da      	uxtb	r2, r3
 8000284:	490c      	ldr	r1, [pc, #48]	; (80002b8 <__NVIC_SetPriority+0x4c>)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	0112      	lsls	r2, r2, #4
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	440b      	add	r3, r1
 8000290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000294:	e00a      	b.n	80002ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	b2da      	uxtb	r2, r3
 800029a:	4908      	ldr	r1, [pc, #32]	; (80002bc <__NVIC_SetPriority+0x50>)
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	f003 030f 	and.w	r3, r3, #15
 80002a2:	3b04      	subs	r3, #4
 80002a4:	0112      	lsls	r2, r2, #4
 80002a6:	b2d2      	uxtb	r2, r2
 80002a8:	440b      	add	r3, r1
 80002aa:	761a      	strb	r2, [r3, #24]
}
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	e000e100 	.word	0xe000e100
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <osKernelStackInit>:

/*Each thread will have stacksize of 100 i.e. 400bytes*/
int32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];

void osKernelStackInit(int i)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	tcbs[i].stackPt = &TCB_STACK[i][STACKSIZE - 16];
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80002ce:	fb02 f303 	mul.w	r3, r2, r3
 80002d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80002d6:	4a60      	ldr	r2, [pc, #384]	; (8000458 <osKernelStackInit+0x198>)
 80002d8:	441a      	add	r2, r3
 80002da:	4960      	ldr	r1, [pc, #384]	; (800045c <osKernelStackInit+0x19c>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

	/*Set bit21 (T-bit) in PSR to 1, to operate in Thumb mode */
	TCB_STACK[i][STACKSIZE - 1] = (1<<24);  /*PSR*/
 80002e2:	4a5d      	ldr	r2, [pc, #372]	; (8000458 <osKernelStackInit+0x198>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80002ea:	fb01 f303 	mul.w	r3, r1, r3
 80002ee:	4413      	add	r3, r2
 80002f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80002f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002f8:	601a      	str	r2, [r3, #0]

	/*Dummy stack content*/
	TCB_STACK[i][STACKSIZE - 3]  =  0xAAAAAAAA;		/*R14*/
 80002fa:	4a57      	ldr	r2, [pc, #348]	; (8000458 <osKernelStackInit+0x198>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000302:	fb01 f303 	mul.w	r3, r1, r3
 8000306:	4413      	add	r3, r2
 8000308:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800030c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000310:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 4]  =  0xAAAAAAAA;		/*R12*/
 8000312:	4a51      	ldr	r2, [pc, #324]	; (8000458 <osKernelStackInit+0x198>)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800031a:	fb01 f303 	mul.w	r3, r1, r3
 800031e:	4413      	add	r3, r2
 8000320:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000324:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000328:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 5]  =  0xAAAAAAAA;		/*R3*/
 800032a:	4a4b      	ldr	r2, [pc, #300]	; (8000458 <osKernelStackInit+0x198>)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000332:	fb01 f303 	mul.w	r3, r1, r3
 8000336:	4413      	add	r3, r2
 8000338:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800033c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000340:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 6]  =  0xAAAAAAAA;		/*R2*/
 8000342:	4a45      	ldr	r2, [pc, #276]	; (8000458 <osKernelStackInit+0x198>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800034a:	fb01 f303 	mul.w	r3, r1, r3
 800034e:	4413      	add	r3, r2
 8000350:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000354:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000358:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 7]  =  0xAAAAAAAA;		/*R1*/
 800035a:	4a3f      	ldr	r2, [pc, #252]	; (8000458 <osKernelStackInit+0x198>)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000362:	fb01 f303 	mul.w	r3, r1, r3
 8000366:	4413      	add	r3, r2
 8000368:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800036c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000370:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 8]  =  0xAAAAAAAA;		/*R0*/
 8000372:	4a39      	ldr	r2, [pc, #228]	; (8000458 <osKernelStackInit+0x198>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800037a:	fb01 f303 	mul.w	r3, r1, r3
 800037e:	4413      	add	r3, r2
 8000380:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000384:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000388:	601a      	str	r2, [r3, #0]

	TCB_STACK[i][STACKSIZE - 9]  =  0xAAAAAAAA;		/*R11*/
 800038a:	4a33      	ldr	r2, [pc, #204]	; (8000458 <osKernelStackInit+0x198>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000392:	fb01 f303 	mul.w	r3, r1, r3
 8000396:	4413      	add	r3, r2
 8000398:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800039c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003a0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 10] = 0xAAAAAAAA;		/*R10*/
 80003a2:	4a2d      	ldr	r2, [pc, #180]	; (8000458 <osKernelStackInit+0x198>)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80003aa:	fb01 f303 	mul.w	r3, r1, r3
 80003ae:	4413      	add	r3, r2
 80003b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80003b4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003b8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 11] = 0xAAAAAAAA;		/*R9*/
 80003ba:	4a27      	ldr	r2, [pc, #156]	; (8000458 <osKernelStackInit+0x198>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80003c2:	fb01 f303 	mul.w	r3, r1, r3
 80003c6:	4413      	add	r3, r2
 80003c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80003cc:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003d0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 12] = 0xAAAAAAAA;		/*R8*/
 80003d2:	4a21      	ldr	r2, [pc, #132]	; (8000458 <osKernelStackInit+0x198>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80003da:	fb01 f303 	mul.w	r3, r1, r3
 80003de:	4413      	add	r3, r2
 80003e0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80003e4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003e8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 13] = 0xAAAAAAAA;		/*R7*/
 80003ea:	4a1b      	ldr	r2, [pc, #108]	; (8000458 <osKernelStackInit+0x198>)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80003f2:	fb01 f303 	mul.w	r3, r1, r3
 80003f6:	4413      	add	r3, r2
 80003f8:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80003fc:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000400:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 14] = 0xAAAAAAAA;		/*R6*/
 8000402:	4a15      	ldr	r2, [pc, #84]	; (8000458 <osKernelStackInit+0x198>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800040a:	fb01 f303 	mul.w	r3, r1, r3
 800040e:	4413      	add	r3, r2
 8000410:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8000414:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000418:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 15] = 0xAAAAAAAA;		/*R5*/
 800041a:	4a0f      	ldr	r2, [pc, #60]	; (8000458 <osKernelStackInit+0x198>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000422:	fb01 f303 	mul.w	r3, r1, r3
 8000426:	4413      	add	r3, r2
 8000428:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800042c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000430:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 16] = 0xAAAAAAAA;		/*R4*/
 8000432:	4a09      	ldr	r2, [pc, #36]	; (8000458 <osKernelStackInit+0x198>)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800043a:	fb01 f303 	mul.w	r3, r1, r3
 800043e:	4413      	add	r3, r2
 8000440:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000444:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000448:	601a      	str	r2, [r3, #0]


}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000048 	.word	0x20000048
 800045c:	2000002c 	.word	0x2000002c

08000460 <osSchedulerLaunch>:

void osSchedulerLaunch(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
	/*Load address of currentPt into R0*/
	__asm("LDR R0, =currentPt");
 8000464:	4809      	ldr	r0, [pc, #36]	; (800048c <osSchedulerLaunch+0x2c>)

	/*Load R2 from address equals r0, r2=currentPt*/
	__asm("LDR R2, [r0]");
 8000466:	6802      	ldr	r2, [r0, #0]

	/*Load Cortex-M SP from address equals R2, i.e. SP =currentPt >- stackPt */
	__asm("LDR SP, [R2]");
 8000468:	f8d2 d000 	ldr.w	sp, [r2]

	/*Restore r4, r5, r6, r7, r8, r9, r10, r11*/
	__asm("POP {R4-R11}");
 800046c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Restore r0, r1, r2, r3*/
	__asm("POP {R0-R3}");
 8000470:	bc0f      	pop	{r0, r1, r2, r3}

	/*Restore R12*/
	__asm("POP {R12}");
 8000472:	f85d cb04 	ldr.w	ip, [sp], #4

	/*Skip LR*/
	__asm("ADD SP, SP, #4");
 8000476:	b001      	add	sp, #4

	/*Create a new start location by popping LR*/
	__asm("POP {LR}");
 8000478:	f85d eb04 	ldr.w	lr, [sp], #4

	/*Skip PSR by adding 4 to SP*/
	__asm("ADD SP, SP, #4");
 800047c:	b001      	add	sp, #4

	/*Enable global interrupts*/
	__asm("CPSIE  I");
 800047e:	b662      	cpsie	i

	/*Return from exception and restore r0, r1, r2, r3, r12, lr, sp*/
	__asm("BX   LR");
 8000480:	4770      	bx	lr


}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	20000044 	.word	0x20000044

08000490 <osKernelAddThreads>:


uint8_t osKernelAddThreads(void(*task0)(void), void(*task1)(void), void(*task2)(void))
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
}
 800049e:	bf00      	nop
	/*Disable global interrupts*/
	__disable_irq();
	tcbs[0].nextPt = &tcbs[1];
 80004a0:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <osKernelAddThreads+0x60>)
 80004a2:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <osKernelAddThreads+0x64>)
 80004a4:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt = &tcbs[2];
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <osKernelAddThreads+0x60>)
 80004a8:	4a13      	ldr	r2, [pc, #76]	; (80004f8 <osKernelAddThreads+0x68>)
 80004aa:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt = &tcbs[0];
 80004ac:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <osKernelAddThreads+0x60>)
 80004ae:	4a10      	ldr	r2, [pc, #64]	; (80004f0 <osKernelAddThreads+0x60>)
 80004b0:	615a      	str	r2, [r3, #20]

	/*Initialize stack for thread0*/
	osKernelStackInit(0);
 80004b2:	2000      	movs	r0, #0
 80004b4:	f7ff ff04 	bl	80002c0 <osKernelStackInit>
	/*Initialize PC*/
	TCB_STACK[0][STACKSIZE - 2] = (int32_t)(task0);
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	4a10      	ldr	r2, [pc, #64]	; (80004fc <osKernelAddThreads+0x6c>)
 80004bc:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188

	/*Initialize stack for thread1*/
	osKernelStackInit(1);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff fefd 	bl	80002c0 <osKernelStackInit>
	/*Initialize PC*/
	TCB_STACK[1][STACKSIZE - 2] = (int32_t)(task1);
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	4a0c      	ldr	r2, [pc, #48]	; (80004fc <osKernelAddThreads+0x6c>)
 80004ca:	f8c2 3318 	str.w	r3, [r2, #792]	; 0x318

	/*Initialize stack for thread2*/
	osKernelStackInit(2);
 80004ce:	2002      	movs	r0, #2
 80004d0:	f7ff fef6 	bl	80002c0 <osKernelStackInit>
	/*Initialize PC*/
	TCB_STACK[2][STACKSIZE - 2] = (int32_t)(task2);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a09      	ldr	r2, [pc, #36]	; (80004fc <osKernelAddThreads+0x6c>)
 80004d8:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8

	/*Start from thread0*/
	currentPt = &tcbs[0];
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <osKernelAddThreads+0x70>)
 80004de:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <osKernelAddThreads+0x60>)
 80004e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004e2:	b662      	cpsie	i
}
 80004e4:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();

	return 1;
 80004e6:	2301      	movs	r3, #1


}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	2000002c 	.word	0x2000002c
 80004f4:	20000034 	.word	0x20000034
 80004f8:	2000003c 	.word	0x2000003c
 80004fc:	20000048 	.word	0x20000048
 8000500:	20000044 	.word	0x20000044

08000504 <osKernelInit>:

void osKernelInit(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER = (BUS_FREQ/1000);
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <osKernelInit+0x18>)
 800050a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800050e:	601a      	str	r2, [r3, #0]
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000028 	.word	0x20000028

08000520 <osKernelLaunch>:

void osKernelLaunch(uint32_t quanta)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	/*Reset systick*/
	SysTick-> CTRL = SYSTICK_RST;
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <osKernelLaunch+0x4c>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]

	/*Clear systick current value register*/
	SysTick -> VAL = 0;
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <osKernelLaunch+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]

	/*Load quanta*/
	SysTick -> LOAD = (quanta * MILLIS_PRESCALER) - 1;
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <osKernelLaunch+0x50>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	fb02 f303 	mul.w	r3, r2, r3
 800053e:	4a0b      	ldr	r2, [pc, #44]	; (800056c <osKernelLaunch+0x4c>)
 8000540:	3b01      	subs	r3, #1
 8000542:	6053      	str	r3, [r2, #4]

	/*Set systick to low priority*/
	NVIC_SetPriority(SysTick_IRQn, 15);
 8000544:	210f      	movs	r1, #15
 8000546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800054a:	f7ff fe8f 	bl	800026c <__NVIC_SetPriority>

	/*Enable systick, select internal clock*/
	SysTick->CTRL = CTRL_CLCKSRC | CTRL_ENABLE;
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <osKernelLaunch+0x4c>)
 8000550:	2205      	movs	r2, #5
 8000552:	601a      	str	r2, [r3, #0]

	/*Enable systick interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <osKernelLaunch+0x4c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <osKernelLaunch+0x4c>)
 800055a:	f043 0302 	orr.w	r3, r3, #2
 800055e:	6013      	str	r3, [r2, #0]

	/*Launch scheduler*/
	osSchedulerLaunch();
 8000560:	f7ff ff7e 	bl	8000460 <osSchedulerLaunch>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	e000e010 	.word	0xe000e010
 8000570:	20000028 	.word	0x20000028

08000574 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000576:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000578:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800057e:	490d      	ldr	r1, [pc, #52]	; (80005b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000580:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <LoopForever+0xe>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000594:	4c0a      	ldr	r4, [pc, #40]	; (80005c0 <LoopForever+0x16>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005a2:	f000 f811 	bl	80005c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a6:	f7ff fe4b 	bl	8000240 <main>

080005aa <LoopForever>:

LoopForever:
  b LoopForever
 80005aa:	e7fe      	b.n	80005aa <LoopForever>
  ldr   r0, =_estack
 80005ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005b8:	08000630 	.word	0x08000630
  ldr r2, =_sbss
 80005bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005c0:	200004f8 	.word	0x200004f8

080005c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC_IRQHandler>
	...

080005c8 <__libc_init_array>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	4d0d      	ldr	r5, [pc, #52]	; (8000600 <__libc_init_array+0x38>)
 80005cc:	4c0d      	ldr	r4, [pc, #52]	; (8000604 <__libc_init_array+0x3c>)
 80005ce:	1b64      	subs	r4, r4, r5
 80005d0:	10a4      	asrs	r4, r4, #2
 80005d2:	2600      	movs	r6, #0
 80005d4:	42a6      	cmp	r6, r4
 80005d6:	d109      	bne.n	80005ec <__libc_init_array+0x24>
 80005d8:	4d0b      	ldr	r5, [pc, #44]	; (8000608 <__libc_init_array+0x40>)
 80005da:	4c0c      	ldr	r4, [pc, #48]	; (800060c <__libc_init_array+0x44>)
 80005dc:	f000 f818 	bl	8000610 <_init>
 80005e0:	1b64      	subs	r4, r4, r5
 80005e2:	10a4      	asrs	r4, r4, #2
 80005e4:	2600      	movs	r6, #0
 80005e6:	42a6      	cmp	r6, r4
 80005e8:	d105      	bne.n	80005f6 <__libc_init_array+0x2e>
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f0:	4798      	blx	r3
 80005f2:	3601      	adds	r6, #1
 80005f4:	e7ee      	b.n	80005d4 <__libc_init_array+0xc>
 80005f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005fa:	4798      	blx	r3
 80005fc:	3601      	adds	r6, #1
 80005fe:	e7f2      	b.n	80005e6 <__libc_init_array+0x1e>
 8000600:	08000628 	.word	0x08000628
 8000604:	08000628 	.word	0x08000628
 8000608:	08000628 	.word	0x08000628
 800060c:	0800062c 	.word	0x0800062c

08000610 <_init>:
 8000610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000612:	bf00      	nop
 8000614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000616:	bc08      	pop	{r3}
 8000618:	469e      	mov	lr, r3
 800061a:	4770      	bx	lr

0800061c <_fini>:
 800061c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061e:	bf00      	nop
 8000620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000622:	bc08      	pop	{r3}
 8000624:	469e      	mov	lr, r3
 8000626:	4770      	bx	lr
