
3_timebase_initialization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004ac  080004ac  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004ac  080004ac  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004ac  080004ac  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004ac  080004ac  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ac  080004ac  000104ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080004b8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004b8  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a27  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000042a  00000000  00000000  00020a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f8  00000000  00000000  00020ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a2  00000000  00000000  00020fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019994  00000000  00000000  00021062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000179d  00000000  00000000  0003a9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ec87  00000000  00000000  0003c193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000240  00000000  00000000  000cae1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cb05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000494 	.word	0x08000494

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000494 	.word	0x08000494

08000204 <led_init>:

#define GPIOAEN (1U<<0) 	//0x00000001 , for later use to enable clock signal for Port A
#define LED_PIN (1U<<5)

void led_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/*Enable clock access for Port A*/
	RCC -> AHB1ENR |= GPIOAEN;	//setting bit 1 of register RCC_AHB1ENR as high (RM_pg_144)
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <led_init+0x34>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <led_init+0x34>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

	/*Define pin 5 of PORT A as OUTPUT*/
	GPIOA -> MODER |= (1U << 10);
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <led_init+0x38>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a08      	ldr	r2, [pc, #32]	; (800023c <led_init+0x38>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~ (1U << 11);	//GPIOX_MODER register use to define output (RM_pg_187)
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <led_init+0x38>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a05      	ldr	r2, [pc, #20]	; (800023c <led_init+0x38>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800022a:	6013      	str	r3, [r2, #0]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40023800 	.word	0x40023800
 800023c:	40020000 	.word	0x40020000

08000240 <main>:
#include "timebase.h"



int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
	led_init();
 8000246:	f7ff ffdd 	bl	8000204 <led_init>
	_uart_tx_init();
 800024a:	f000 f84f 	bl	80002ec <_uart_tx_init>
	char x = 'k';
 800024e:	236b      	movs	r3, #107	; 0x6b
 8000250:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
//		led_on();
		putchar(x);
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f83d 	bl	80002d4 <putchar>
		//putchar('\n');
		delay(1);
 800025a:	2001      	movs	r0, #1
 800025c:	f000 f818 	bl	8000290 <delay>
		putchar(x);
 8000260:	e7f7      	b.n	8000252 <main+0x12>
	...

08000264 <get_tick>:
{
	g_curr_tick += tick_freq;
}

uint32_t get_tick(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000268:	b672      	cpsid	i
}
 800026a:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <get_tick+0x24>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <get_tick+0x28>)
 8000272:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000274:	b662      	cpsie	i
}
 8000276:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <get_tick+0x28>)
 800027a:	681b      	ldr	r3, [r3, #0]
}
 800027c:	4618      	mov	r0, r3
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	20000020 	.word	0x20000020
 800028c:	20000024 	.word	0x20000024

08000290 <delay>:

void delay(uint32_t delay)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = get_tick();
 8000298:	f7ff ffe4 	bl	8000264 <get_tick>
 800029c:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002a8:	d004      	beq.n	80002b4 <delay+0x24>
	{
		wait += (uint32_t)(tick_freq);
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <delay+0x40>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	68fa      	ldr	r2, [r7, #12]
 80002b0:	4413      	add	r3, r2
 80002b2:	60fb      	str	r3, [r7, #12]
	}
	while ((get_tick() - tickstart) < wait){}
 80002b4:	bf00      	nop
 80002b6:	f7ff ffd5 	bl	8000264 <get_tick>
 80002ba:	4602      	mov	r2, r0
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	1ad3      	subs	r3, r2, r3
 80002c0:	68fa      	ldr	r2, [r7, #12]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d8f7      	bhi.n	80002b6 <delay+0x26>
}
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000000 	.word	0x20000000

080002d4 <putchar>:
static uint16_t _compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int putchar(int ch)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f000 f84f 	bl	8000380 <uart_write>
	return ch;
 80002e2:	687b      	ldr	r3, [r7, #4]
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <_uart_tx_init>:

void _uart_tx_init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	/*Enable clock access for PORT A because USART2 pins are in PORT A DS_pg_16*/
	RCC -> AHB1ENR |= GPIOAEN;	//setting bit 1 of register RCC_AHB1ENR as high (RM_pg_144)
 80002f0:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <_uart_tx_init+0x84>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a1e      	ldr	r2, [pc, #120]	; (8000370 <_uart_tx_init+0x84>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 (USART2_Tx) as alternate function mode (Direction Register)*/
	GPIOA -> MODER |= (1U<<5);
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <_uart_tx_init+0x88>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a1c      	ldr	r2, [pc, #112]	; (8000374 <_uart_tx_init+0x88>)
 8000302:	f043 0320 	orr.w	r3, r3, #32
 8000306:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U<<4);
 8000308:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <_uart_tx_init+0x88>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a19      	ldr	r2, [pc, #100]	; (8000374 <_uart_tx_init+0x88>)
 800030e:	f023 0310 	bic.w	r3, r3, #16
 8000312:	6013      	str	r3, [r2, #0]

	/*Define af as AF07 DS_pg_48*/
	GPIOA -> AFR[0] |= (1U << 8);
 8000314:	4b17      	ldr	r3, [pc, #92]	; (8000374 <_uart_tx_init+0x88>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a16      	ldr	r2, [pc, #88]	; (8000374 <_uart_tx_init+0x88>)
 800031a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800031e:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U << 9);
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <_uart_tx_init+0x88>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	4a13      	ldr	r2, [pc, #76]	; (8000374 <_uart_tx_init+0x88>)
 8000326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800032a:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U << 10);
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <_uart_tx_init+0x88>)
 800032e:	6a1b      	ldr	r3, [r3, #32]
 8000330:	4a10      	ldr	r2, [pc, #64]	; (8000374 <_uart_tx_init+0x88>)
 8000332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000336:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U << 11);		//GPIOX_AFRL register RM_pg_191, setting AF7 = 0111
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <_uart_tx_init+0x88>)
 800033a:	6a1b      	ldr	r3, [r3, #32]
 800033c:	4a0d      	ldr	r2, [pc, #52]	; (8000374 <_uart_tx_init+0x88>)
 800033e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000342:	6213      	str	r3, [r2, #32]


	/*Enable clock access to USART2 (APB1 bus)*/
	RCC -> APB1ENR |= UART2EN;
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <_uart_tx_init+0x84>)
 8000346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000348:	4a09      	ldr	r2, [pc, #36]	; (8000370 <_uart_tx_init+0x84>)
 800034a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800034e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baud rate*/
	uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 8000350:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000354:	4808      	ldr	r0, [pc, #32]	; (8000378 <_uart_tx_init+0x8c>)
 8000356:	f000 f83b 	bl	80003d0 <uart_set_baudrate>

	/*Configure transfer direction*/
	USART2 -> CR1 = CR1_TE;
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <_uart_tx_init+0x90>)
 800035c:	2208      	movs	r2, #8
 800035e:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	USART2 -> CR1 |= USART_CR1_UE;
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <_uart_tx_init+0x90>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	4a05      	ldr	r2, [pc, #20]	; (800037c <_uart_tx_init+0x90>)
 8000366:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800036a:	60d3      	str	r3, [r2, #12]

}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40023800 	.word	0x40023800
 8000374:	40020000 	.word	0x40020000
 8000378:	00f42400 	.word	0x00f42400
 800037c:	40004400 	.word	0x40004400

08000380 <uart_write>:

static void uart_write(int ch)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	/*Empty the transmit register*/
	while(!(USART2 -> SR) & (1 << 7)) {}
 8000388:	bf00      	nop
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <uart_write+0x24>)
 800038c:	681b      	ldr	r3, [r3, #0]
	//while (!(USART2->SR & USART_SR_TXE)) {}

	/*Write to transmit data register*/
	USART2 -> DR = (ch & 0xFF);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <uart_write+0x24>)
 8000392:	b2db      	uxtb	r3, r3
 8000394:	6053      	str	r3, [r2, #4]
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40004400 	.word	0x40004400

080003a8 <_compute_uart_bd>:

static uint16_t _compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	085a      	lsrs	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	441a      	add	r2, r3
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c0:	b29b      	uxth	r3, r3
	  //return (periph_clk / baudrate);
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
	USART2 -> BRR = _compute_uart_bd(periph_clk, baudrate);
 80003da:	6839      	ldr	r1, [r7, #0]
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f7ff ffe3 	bl	80003a8 <_compute_uart_bd>
 80003e2:	4603      	mov	r3, r0
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <uart_set_baudrate+0x24>)
 80003e8:	609a      	str	r2, [r3, #8]
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40004400 	.word	0x40004400

080003f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000400:	480c      	ldr	r0, [pc, #48]	; (8000434 <LoopForever+0x6>)
  ldr r1, =_edata
 8000402:	490d      	ldr	r1, [pc, #52]	; (8000438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <LoopForever+0xe>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000418:	4c0a      	ldr	r4, [pc, #40]	; (8000444 <LoopForever+0x16>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000426:	f000 f811 	bl	800044c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042a:	f7ff ff09 	bl	8000240 <main>

0800042e <LoopForever>:

LoopForever:
  b LoopForever
 800042e:	e7fe      	b.n	800042e <LoopForever>
  ldr   r0, =_estack
 8000430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800043c:	080004b4 	.word	0x080004b4
  ldr r2, =_sbss
 8000440:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000444:	20000028 	.word	0x20000028

08000448 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC_IRQHandler>
	...

0800044c <__libc_init_array>:
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	4d0d      	ldr	r5, [pc, #52]	; (8000484 <__libc_init_array+0x38>)
 8000450:	4c0d      	ldr	r4, [pc, #52]	; (8000488 <__libc_init_array+0x3c>)
 8000452:	1b64      	subs	r4, r4, r5
 8000454:	10a4      	asrs	r4, r4, #2
 8000456:	2600      	movs	r6, #0
 8000458:	42a6      	cmp	r6, r4
 800045a:	d109      	bne.n	8000470 <__libc_init_array+0x24>
 800045c:	4d0b      	ldr	r5, [pc, #44]	; (800048c <__libc_init_array+0x40>)
 800045e:	4c0c      	ldr	r4, [pc, #48]	; (8000490 <__libc_init_array+0x44>)
 8000460:	f000 f818 	bl	8000494 <_init>
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	10a4      	asrs	r4, r4, #2
 8000468:	2600      	movs	r6, #0
 800046a:	42a6      	cmp	r6, r4
 800046c:	d105      	bne.n	800047a <__libc_init_array+0x2e>
 800046e:	bd70      	pop	{r4, r5, r6, pc}
 8000470:	f855 3b04 	ldr.w	r3, [r5], #4
 8000474:	4798      	blx	r3
 8000476:	3601      	adds	r6, #1
 8000478:	e7ee      	b.n	8000458 <__libc_init_array+0xc>
 800047a:	f855 3b04 	ldr.w	r3, [r5], #4
 800047e:	4798      	blx	r3
 8000480:	3601      	adds	r6, #1
 8000482:	e7f2      	b.n	800046a <__libc_init_array+0x1e>
 8000484:	080004ac 	.word	0x080004ac
 8000488:	080004ac 	.word	0x080004ac
 800048c:	080004ac 	.word	0x080004ac
 8000490:	080004b0 	.word	0x080004b0

08000494 <_init>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	bf00      	nop
 8000498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049a:	bc08      	pop	{r3}
 800049c:	469e      	mov	lr, r3
 800049e:	4770      	bx	lr

080004a0 <_fini>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	bf00      	nop
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr
