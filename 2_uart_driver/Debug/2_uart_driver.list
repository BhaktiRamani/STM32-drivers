
2_uart_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000368  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800052c  08000534  00010534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800052c  0800052c  00010534  2**0
                  CONTENTS
  4 .ARM          00000000  0800052c  0800052c  00010534  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800052c  08000534  00010534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800052c  0800052c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000530  08000530  00010530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000534  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000534  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010534  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010564  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b33  00000000  00000000  000105a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000372  00000000  00000000  000110da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  00011450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008b  00000000  00000000  00011528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001989b  00000000  00000000  000115b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015f3  00000000  00000000  0002ae4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eba7  00000000  00000000  0002c441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001c0  00000000  00000000  000bafe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000bb1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000514 	.word	0x08000514

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000514 	.word	0x08000514

08000204 <clock_config>:
#define PLL_N 	180
#define PLL_P 	0  // PLLP = 2


void clock_config(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/*1) Defining HSE using RCC_CR register    RM_127*/
	RCC -> CR |= RCC_CR_HSEON;
 8000208:	4b31      	ldr	r3, [pc, #196]	; (80002d0 <clock_config+0xcc>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a30      	ldr	r2, [pc, #192]	; (80002d0 <clock_config+0xcc>)
 800020e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000212:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000214:	bf00      	nop
 8000216:	4b2e      	ldr	r3, [pc, #184]	; (80002d0 <clock_config+0xcc>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800021e:	2b00      	cmp	r3, #0
 8000220:	d0f9      	beq.n	8000216 <clock_config+0x12>

	/*2) Enabling the power using RCC_APB1ENR register 		RM_147*/
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN  ;
 8000222:	4b2b      	ldr	r3, [pc, #172]	; (80002d0 <clock_config+0xcc>)
 8000224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000226:	4a2a      	ldr	r2, [pc, #168]	; (80002d0 <clock_config+0xcc>)
 8000228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800022c:	6413      	str	r3, [r2, #64]	; 0x40
	PWR -> CR |= PWR_CR_VOS;								/*RM_111*/
 800022e:	4b29      	ldr	r3, [pc, #164]	; (80002d4 <clock_config+0xd0>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a28      	ldr	r2, [pc, #160]	; (80002d4 <clock_config+0xd0>)
 8000234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000238:	6013      	str	r3, [r2, #0]

	/*3) Flash Prefatch and Latency settings*/
	FLASH->ACR |= 1<<8;
 800023a:	4b27      	ldr	r3, [pc, #156]	; (80002d8 <clock_config+0xd4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a26      	ldr	r2, [pc, #152]	; (80002d8 <clock_config+0xd4>)
 8000240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000244:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<9;
 8000246:	4b24      	ldr	r3, [pc, #144]	; (80002d8 <clock_config+0xd4>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a23      	ldr	r2, [pc, #140]	; (80002d8 <clock_config+0xd4>)
 800024c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000250:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<10;
 8000252:	4b21      	ldr	r3, [pc, #132]	; (80002d8 <clock_config+0xd4>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a20      	ldr	r2, [pc, #128]	; (80002d8 <clock_config+0xd4>)
 8000258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025c:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 5<<0;
 800025e:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <clock_config+0xd4>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a1d      	ldr	r2, [pc, #116]	; (80002d8 <clock_config+0xd4>)
 8000264:	f043 0305 	orr.w	r3, r3, #5
 8000268:	6013      	str	r3, [r2, #0]

	/*4) Configure Prescalers HCLK, PCLK1, PCLK2*/

	//AHB PR
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800026a:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <clock_config+0xcc>)
 800026c:	4a18      	ldr	r2, [pc, #96]	; (80002d0 <clock_config+0xcc>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	6093      	str	r3, [r2, #8]

	//APB1 PR
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <clock_config+0xcc>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	4a16      	ldr	r2, [pc, #88]	; (80002d0 <clock_config+0xcc>)
 8000278:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800027c:	6093      	str	r3, [r2, #8]

	//APB2 PR
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <clock_config+0xcc>)
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <clock_config+0xcc>)
 8000284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000288:	6093      	str	r3, [r2, #8]

	/*5) PLL settings*/
	RCC->PLLCFGR = (PLL_M <<0) | (PLL_N << 6) | (PLL_P <<16) | (1<<22);
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <clock_config+0xcc>)
 800028c:	4a13      	ldr	r2, [pc, #76]	; (80002dc <clock_config+0xd8>)
 800028e:	605a      	str	r2, [r3, #4]

	/*6)Enable the PLL and wait for it to become ready*/
	RCC -> CR |= RCC_CR_PLLON;
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <clock_config+0xcc>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <clock_config+0xcc>)
 8000296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800029a:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_PLLRDY));
 800029c:	bf00      	nop
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <clock_config+0xcc>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f9      	beq.n	800029e <clock_config+0x9a>

	/*7) Set clock source and wait for it to become ready*/
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <clock_config+0xcc>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	4a08      	ldr	r2, [pc, #32]	; (80002d0 <clock_config+0xcc>)
 80002b0:	f043 0302 	orr.w	r3, r3, #2
 80002b4:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80002b6:	bf00      	nop
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <clock_config+0xcc>)
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	f003 030c 	and.w	r3, r3, #12
 80002c0:	2b08      	cmp	r3, #8
 80002c2:	d1f9      	bne.n	80002b8 <clock_config+0xb4>





}
 80002c4:	bf00      	nop
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40007000 	.word	0x40007000
 80002d8:	40023c00 	.word	0x40023c00
 80002dc:	00402d04 	.word	0x00402d04

080002e0 <led_init>:

#define GPIOAEN (1U<<0) 	//0x00000001 , for later use to enable clock signal for Port A
#define LED_PIN (1U<<5)

void led_init(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	/*Enable clock access for Port A*/
	RCC -> AHB1ENR |= GPIOAEN;	//setting bit 1 of register RCC_AHB1ENR as high (RM_pg_144)
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <led_init+0x34>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <led_init+0x34>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30

	/*Define pin 5 of PORT A as OUTPUT*/
	GPIOA -> MODER |= (1U << 10);
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <led_init+0x38>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a08      	ldr	r2, [pc, #32]	; (8000318 <led_init+0x38>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~ (1U << 11);	//GPIOX_MODER register use to define output (RM_pg_187)
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <led_init+0x38>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a05      	ldr	r2, [pc, #20]	; (8000318 <led_init+0x38>)
 8000302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000306:	6013      	str	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40023800 	.word	0x40023800
 8000318:	40020000 	.word	0x40020000

0800031c <main>:
#include "led.h"
#include "uart.h"
#include <stdio.h>

int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
	clock_config();
 8000322:	f7ff ff6f 	bl	8000204 <clock_config>
	led_init();
 8000326:	f7ff ffdb 	bl	80002e0 <led_init>
	_uart_tx_init();
 800032a:	f000 f81f 	bl	800036c <_uart_tx_init>
	char x = 'C';
 800032e:	2343      	movs	r3, #67	; 0x43
 8000330:	70fb      	strb	r3, [r7, #3]
	//uint8_t data[30] = "hello";
	while(1)
	{
	//printf("abcdef");
		putchar(x);
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	4618      	mov	r0, r3
 8000336:	f000 f80d 	bl	8000354 <putchar>
		//printf("hello\n");
		//printf(data);
//		led_on();
//		for(int i = 0; i<=9000; i++){}
//		led_off();
		for(int i = 0; i<=100000; i++){}
 800033a:	2300      	movs	r3, #0
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	e002      	b.n	8000346 <main+0x2a>
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3301      	adds	r3, #1
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a01      	ldr	r2, [pc, #4]	; (8000350 <main+0x34>)
 800034a:	4293      	cmp	r3, r2
 800034c:	ddf8      	ble.n	8000340 <main+0x24>
		putchar(x);
 800034e:	e7f0      	b.n	8000332 <main+0x16>
 8000350:	000186a0 	.word	0x000186a0

08000354 <putchar>:
static uint16_t _compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int putchar(int ch)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 800035c:	6878      	ldr	r0, [r7, #4]
 800035e:	f000 f84f 	bl	8000400 <uart_write>
	return ch;
 8000362:	687b      	ldr	r3, [r7, #4]
}
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <_uart_tx_init>:

void _uart_tx_init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	/*Enable clock access for PORT A because USART2 pins are in PORT A DS_pg_16*/
	RCC -> AHB1ENR |= GPIOAEN;	//setting bit 1 of register RCC_AHB1ENR as high (RM_pg_144)
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <_uart_tx_init+0x84>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000374:	4a1e      	ldr	r2, [pc, #120]	; (80003f0 <_uart_tx_init+0x84>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 (USART2_Tx) as alternate function mode (Direction Register)*/
	GPIOA -> MODER |= (1U<<5);
 800037c:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <_uart_tx_init+0x88>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a1c      	ldr	r2, [pc, #112]	; (80003f4 <_uart_tx_init+0x88>)
 8000382:	f043 0320 	orr.w	r3, r3, #32
 8000386:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U<<4);
 8000388:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <_uart_tx_init+0x88>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a19      	ldr	r2, [pc, #100]	; (80003f4 <_uart_tx_init+0x88>)
 800038e:	f023 0310 	bic.w	r3, r3, #16
 8000392:	6013      	str	r3, [r2, #0]

	/*Define af as AF07 DS_pg_48*/
	GPIOA -> AFR[0] |= (1U << 8);
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <_uart_tx_init+0x88>)
 8000396:	6a1b      	ldr	r3, [r3, #32]
 8000398:	4a16      	ldr	r2, [pc, #88]	; (80003f4 <_uart_tx_init+0x88>)
 800039a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800039e:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U << 9);
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <_uart_tx_init+0x88>)
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	4a13      	ldr	r2, [pc, #76]	; (80003f4 <_uart_tx_init+0x88>)
 80003a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003aa:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U << 10);
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <_uart_tx_init+0x88>)
 80003ae:	6a1b      	ldr	r3, [r3, #32]
 80003b0:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <_uart_tx_init+0x88>)
 80003b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003b6:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U << 11);		//GPIOX_AFRL register RM_pg_191, setting AF7 = 0111
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <_uart_tx_init+0x88>)
 80003ba:	6a1b      	ldr	r3, [r3, #32]
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <_uart_tx_init+0x88>)
 80003be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003c2:	6213      	str	r3, [r2, #32]


	/*Enable clock access to USART2 (APB1 bus)*/
	RCC -> APB1ENR |= UART2EN;
 80003c4:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <_uart_tx_init+0x84>)
 80003c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c8:	4a09      	ldr	r2, [pc, #36]	; (80003f0 <_uart_tx_init+0x84>)
 80003ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ce:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baud rate*/
	uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 80003d0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80003d4:	4808      	ldr	r0, [pc, #32]	; (80003f8 <_uart_tx_init+0x8c>)
 80003d6:	f000 f83b 	bl	8000450 <uart_set_baudrate>

	/*Configure transfer direction*/
	USART2 -> CR1 = CR1_TE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <_uart_tx_init+0x90>)
 80003dc:	2208      	movs	r2, #8
 80003de:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	USART2 -> CR1 |= USART_CR1_UE;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <_uart_tx_init+0x90>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	4a05      	ldr	r2, [pc, #20]	; (80003fc <_uart_tx_init+0x90>)
 80003e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003ea:	60d3      	str	r3, [r2, #12]

}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40020000 	.word	0x40020000
 80003f8:	00f42400 	.word	0x00f42400
 80003fc:	40004400 	.word	0x40004400

08000400 <uart_write>:

static void uart_write(int ch)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	/*Empty the transmit register*/
	while(!(USART2 -> SR) & (1 << 7)) {}
 8000408:	bf00      	nop
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <uart_write+0x24>)
 800040c:	681b      	ldr	r3, [r3, #0]
	//while (!(USART2->SR & USART_SR_TXE)) {}

	/*Write to transmit data register*/
	USART2 -> DR = (ch & 0xFF);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <uart_write+0x24>)
 8000412:	b2db      	uxtb	r3, r3
 8000414:	6053      	str	r3, [r2, #4]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40004400 	.word	0x40004400

08000428 <_compute_uart_bd>:

static uint16_t _compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	085a      	lsrs	r2, r3, #1
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	441a      	add	r2, r3
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000440:	b29b      	uxth	r3, r3
	  //return (periph_clk / baudrate);
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
	...

08000450 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
	USART2 -> BRR = _compute_uart_bd(periph_clk, baudrate);
 800045a:	6839      	ldr	r1, [r7, #0]
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f7ff ffe3 	bl	8000428 <_compute_uart_bd>
 8000462:	4603      	mov	r3, r0
 8000464:	461a      	mov	r2, r3
 8000466:	4b03      	ldr	r3, [pc, #12]	; (8000474 <uart_set_baudrate+0x24>)
 8000468:	609a      	str	r2, [r3, #8]
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40004400 	.word	0x40004400

08000478 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000478:	480d      	ldr	r0, [pc, #52]	; (80004b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800047c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000482:	490d      	ldr	r1, [pc, #52]	; (80004b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000484:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <LoopForever+0xe>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800048c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000498:	4c0a      	ldr	r4, [pc, #40]	; (80004c4 <LoopForever+0x16>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a6:	f000 f811 	bl	80004cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004aa:	f7ff ff37 	bl	800031c <main>

080004ae <LoopForever>:

LoopForever:
  b LoopForever
 80004ae:	e7fe      	b.n	80004ae <LoopForever>
  ldr   r0, =_estack
 80004b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004bc:	08000534 	.word	0x08000534
  ldr r2, =_sbss
 80004c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004c4:	2000001c 	.word	0x2000001c

080004c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c8:	e7fe      	b.n	80004c8 <ADC_IRQHandler>
	...

080004cc <__libc_init_array>:
 80004cc:	b570      	push	{r4, r5, r6, lr}
 80004ce:	4d0d      	ldr	r5, [pc, #52]	; (8000504 <__libc_init_array+0x38>)
 80004d0:	4c0d      	ldr	r4, [pc, #52]	; (8000508 <__libc_init_array+0x3c>)
 80004d2:	1b64      	subs	r4, r4, r5
 80004d4:	10a4      	asrs	r4, r4, #2
 80004d6:	2600      	movs	r6, #0
 80004d8:	42a6      	cmp	r6, r4
 80004da:	d109      	bne.n	80004f0 <__libc_init_array+0x24>
 80004dc:	4d0b      	ldr	r5, [pc, #44]	; (800050c <__libc_init_array+0x40>)
 80004de:	4c0c      	ldr	r4, [pc, #48]	; (8000510 <__libc_init_array+0x44>)
 80004e0:	f000 f818 	bl	8000514 <_init>
 80004e4:	1b64      	subs	r4, r4, r5
 80004e6:	10a4      	asrs	r4, r4, #2
 80004e8:	2600      	movs	r6, #0
 80004ea:	42a6      	cmp	r6, r4
 80004ec:	d105      	bne.n	80004fa <__libc_init_array+0x2e>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f4:	4798      	blx	r3
 80004f6:	3601      	adds	r6, #1
 80004f8:	e7ee      	b.n	80004d8 <__libc_init_array+0xc>
 80004fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80004fe:	4798      	blx	r3
 8000500:	3601      	adds	r6, #1
 8000502:	e7f2      	b.n	80004ea <__libc_init_array+0x1e>
 8000504:	0800052c 	.word	0x0800052c
 8000508:	0800052c 	.word	0x0800052c
 800050c:	0800052c 	.word	0x0800052c
 8000510:	08000530 	.word	0x08000530

08000514 <_init>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	bf00      	nop
 8000518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051a:	bc08      	pop	{r3}
 800051c:	469e      	mov	lr, r3
 800051e:	4770      	bx	lr

08000520 <_fini>:
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	bf00      	nop
 8000524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000526:	bc08      	pop	{r3}
 8000528:	469e      	mov	lr, r3
 800052a:	4770      	bx	lr
